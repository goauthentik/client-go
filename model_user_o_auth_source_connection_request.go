/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserOAuthSourceConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserOAuthSourceConnectionRequest{}

// UserOAuthSourceConnectionRequest OAuth Source Serializer
type UserOAuthSourceConnectionRequest struct {
	Identifier  string         `json:"identifier"`
	AccessToken NullableString `json:"access_token,omitempty"`
}

type _UserOAuthSourceConnectionRequest UserOAuthSourceConnectionRequest

// NewUserOAuthSourceConnectionRequest instantiates a new UserOAuthSourceConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserOAuthSourceConnectionRequest(identifier string) *UserOAuthSourceConnectionRequest {
	this := UserOAuthSourceConnectionRequest{}
	this.Identifier = identifier
	return &this
}

// NewUserOAuthSourceConnectionRequestWithDefaults instantiates a new UserOAuthSourceConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserOAuthSourceConnectionRequestWithDefaults() *UserOAuthSourceConnectionRequest {
	this := UserOAuthSourceConnectionRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *UserOAuthSourceConnectionRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *UserOAuthSourceConnectionRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *UserOAuthSourceConnectionRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOAuthSourceConnectionRequest) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken.Get()) {
		var ret string
		return ret
	}
	return *o.AccessToken.Get()
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOAuthSourceConnectionRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessToken.Get(), o.AccessToken.IsSet()
}

// HasAccessToken returns a boolean if a field has been set.
func (o *UserOAuthSourceConnectionRequest) HasAccessToken() bool {
	if o != nil && o.AccessToken.IsSet() {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given NullableString and assigns it to the AccessToken field.
func (o *UserOAuthSourceConnectionRequest) SetAccessToken(v string) {
	o.AccessToken.Set(&v)
}

// SetAccessTokenNil sets the value for AccessToken to be an explicit nil
func (o *UserOAuthSourceConnectionRequest) SetAccessTokenNil() {
	o.AccessToken.Set(nil)
}

// UnsetAccessToken ensures that no value is present for AccessToken, not even an explicit nil
func (o *UserOAuthSourceConnectionRequest) UnsetAccessToken() {
	o.AccessToken.Unset()
}

func (o UserOAuthSourceConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserOAuthSourceConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	if o.AccessToken.IsSet() {
		toSerialize["access_token"] = o.AccessToken.Get()
	}
	return toSerialize, nil
}

func (o *UserOAuthSourceConnectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserOAuthSourceConnectionRequest := _UserOAuthSourceConnectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserOAuthSourceConnectionRequest)

	if err != nil {
		return err
	}

	*o = UserOAuthSourceConnectionRequest(varUserOAuthSourceConnectionRequest)

	return err
}

type NullableUserOAuthSourceConnectionRequest struct {
	value *UserOAuthSourceConnectionRequest
	isSet bool
}

func (v NullableUserOAuthSourceConnectionRequest) Get() *UserOAuthSourceConnectionRequest {
	return v.value
}

func (v *NullableUserOAuthSourceConnectionRequest) Set(val *UserOAuthSourceConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOAuthSourceConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOAuthSourceConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOAuthSourceConnectionRequest(val *UserOAuthSourceConnectionRequest) *NullableUserOAuthSourceConnectionRequest {
	return &NullableUserOAuthSourceConnectionRequest{value: val, isSet: true}
}

func (v NullableUserOAuthSourceConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOAuthSourceConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
