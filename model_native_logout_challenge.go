/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// NativeLogoutChallenge Challenge for native browser logout
type NativeLogoutChallenge struct {
	FlowInfo       *ContextualFlowInfo       `json:"flow_info,omitempty"`
	Component      *string                   `json:"component,omitempty"`
	ResponseErrors *map[string][]ErrorDetail `json:"response_errors,omitempty"`
	PostUrl        *string                   `json:"post_url,omitempty"`
	SamlRequest    *string                   `json:"saml_request,omitempty"`
	RelayState     *string                   `json:"relay_state,omitempty"`
	ProviderName   *string                   `json:"provider_name,omitempty"`
	Binding        *string                   `json:"binding,omitempty"`
	RedirectUrl    *string                   `json:"redirect_url,omitempty"`
	IsComplete     *bool                     `json:"is_complete,omitempty"`
}

// NewNativeLogoutChallenge instantiates a new NativeLogoutChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNativeLogoutChallenge() *NativeLogoutChallenge {
	this := NativeLogoutChallenge{}
	var component string = "ak-provider-saml-native-logout"
	this.Component = &component
	var isComplete bool = false
	this.IsComplete = &isComplete
	return &this
}

// NewNativeLogoutChallengeWithDefaults instantiates a new NativeLogoutChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNativeLogoutChallengeWithDefaults() *NativeLogoutChallenge {
	this := NativeLogoutChallenge{}
	var component string = "ak-provider-saml-native-logout"
	this.Component = &component
	var isComplete bool = false
	this.IsComplete = &isComplete
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetFlowInfo() ContextualFlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret ContextualFlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetFlowInfoOk() (*ContextualFlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given ContextualFlowInfo and assigns it to the FlowInfo field.
func (o *NativeLogoutChallenge) SetFlowInfo(v ContextualFlowInfo) {
	o.FlowInfo = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *NativeLogoutChallenge) SetComponent(v string) {
	o.Component = &v
}

// GetResponseErrors returns the ResponseErrors field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetResponseErrors() map[string][]ErrorDetail {
	if o == nil || o.ResponseErrors == nil {
		var ret map[string][]ErrorDetail
		return ret
	}
	return *o.ResponseErrors
}

// GetResponseErrorsOk returns a tuple with the ResponseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetResponseErrorsOk() (*map[string][]ErrorDetail, bool) {
	if o == nil || o.ResponseErrors == nil {
		return nil, false
	}
	return o.ResponseErrors, true
}

// HasResponseErrors returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasResponseErrors() bool {
	if o != nil && o.ResponseErrors != nil {
		return true
	}

	return false
}

// SetResponseErrors gets a reference to the given map[string][]ErrorDetail and assigns it to the ResponseErrors field.
func (o *NativeLogoutChallenge) SetResponseErrors(v map[string][]ErrorDetail) {
	o.ResponseErrors = &v
}

// GetPostUrl returns the PostUrl field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetPostUrl() string {
	if o == nil || o.PostUrl == nil {
		var ret string
		return ret
	}
	return *o.PostUrl
}

// GetPostUrlOk returns a tuple with the PostUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetPostUrlOk() (*string, bool) {
	if o == nil || o.PostUrl == nil {
		return nil, false
	}
	return o.PostUrl, true
}

// HasPostUrl returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasPostUrl() bool {
	if o != nil && o.PostUrl != nil {
		return true
	}

	return false
}

// SetPostUrl gets a reference to the given string and assigns it to the PostUrl field.
func (o *NativeLogoutChallenge) SetPostUrl(v string) {
	o.PostUrl = &v
}

// GetSamlRequest returns the SamlRequest field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetSamlRequest() string {
	if o == nil || o.SamlRequest == nil {
		var ret string
		return ret
	}
	return *o.SamlRequest
}

// GetSamlRequestOk returns a tuple with the SamlRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetSamlRequestOk() (*string, bool) {
	if o == nil || o.SamlRequest == nil {
		return nil, false
	}
	return o.SamlRequest, true
}

// HasSamlRequest returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasSamlRequest() bool {
	if o != nil && o.SamlRequest != nil {
		return true
	}

	return false
}

// SetSamlRequest gets a reference to the given string and assigns it to the SamlRequest field.
func (o *NativeLogoutChallenge) SetSamlRequest(v string) {
	o.SamlRequest = &v
}

// GetRelayState returns the RelayState field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetRelayState() string {
	if o == nil || o.RelayState == nil {
		var ret string
		return ret
	}
	return *o.RelayState
}

// GetRelayStateOk returns a tuple with the RelayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetRelayStateOk() (*string, bool) {
	if o == nil || o.RelayState == nil {
		return nil, false
	}
	return o.RelayState, true
}

// HasRelayState returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasRelayState() bool {
	if o != nil && o.RelayState != nil {
		return true
	}

	return false
}

// SetRelayState gets a reference to the given string and assigns it to the RelayState field.
func (o *NativeLogoutChallenge) SetRelayState(v string) {
	o.RelayState = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetProviderName() string {
	if o == nil || o.ProviderName == nil {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetProviderNameOk() (*string, bool) {
	if o == nil || o.ProviderName == nil {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasProviderName() bool {
	if o != nil && o.ProviderName != nil {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *NativeLogoutChallenge) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetBinding() string {
	if o == nil || o.Binding == nil {
		var ret string
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetBindingOk() (*string, bool) {
	if o == nil || o.Binding == nil {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasBinding() bool {
	if o != nil && o.Binding != nil {
		return true
	}

	return false
}

// SetBinding gets a reference to the given string and assigns it to the Binding field.
func (o *NativeLogoutChallenge) SetBinding(v string) {
	o.Binding = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetRedirectUrl() string {
	if o == nil || o.RedirectUrl == nil {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetRedirectUrlOk() (*string, bool) {
	if o == nil || o.RedirectUrl == nil {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl != nil {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *NativeLogoutChallenge) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetIsComplete returns the IsComplete field value if set, zero value otherwise.
func (o *NativeLogoutChallenge) GetIsComplete() bool {
	if o == nil || o.IsComplete == nil {
		var ret bool
		return ret
	}
	return *o.IsComplete
}

// GetIsCompleteOk returns a tuple with the IsComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeLogoutChallenge) GetIsCompleteOk() (*bool, bool) {
	if o == nil || o.IsComplete == nil {
		return nil, false
	}
	return o.IsComplete, true
}

// HasIsComplete returns a boolean if a field has been set.
func (o *NativeLogoutChallenge) HasIsComplete() bool {
	if o != nil && o.IsComplete != nil {
		return true
	}

	return false
}

// SetIsComplete gets a reference to the given bool and assigns it to the IsComplete field.
func (o *NativeLogoutChallenge) SetIsComplete(v bool) {
	o.IsComplete = &v
}

func (o NativeLogoutChallenge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowInfo != nil {
		toSerialize["flow_info"] = o.FlowInfo
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.ResponseErrors != nil {
		toSerialize["response_errors"] = o.ResponseErrors
	}
	if o.PostUrl != nil {
		toSerialize["post_url"] = o.PostUrl
	}
	if o.SamlRequest != nil {
		toSerialize["saml_request"] = o.SamlRequest
	}
	if o.RelayState != nil {
		toSerialize["relay_state"] = o.RelayState
	}
	if o.ProviderName != nil {
		toSerialize["provider_name"] = o.ProviderName
	}
	if o.Binding != nil {
		toSerialize["binding"] = o.Binding
	}
	if o.RedirectUrl != nil {
		toSerialize["redirect_url"] = o.RedirectUrl
	}
	if o.IsComplete != nil {
		toSerialize["is_complete"] = o.IsComplete
	}
	return json.Marshal(toSerialize)
}

type NullableNativeLogoutChallenge struct {
	value *NativeLogoutChallenge
	isSet bool
}

func (v NullableNativeLogoutChallenge) Get() *NativeLogoutChallenge {
	return v.value
}

func (v *NullableNativeLogoutChallenge) Set(val *NativeLogoutChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableNativeLogoutChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableNativeLogoutChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNativeLogoutChallenge(val *NativeLogoutChallenge) *NullableNativeLogoutChallenge {
	return &NullableNativeLogoutChallenge{value: val, isSet: true}
}

func (v NullableNativeLogoutChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNativeLogoutChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
