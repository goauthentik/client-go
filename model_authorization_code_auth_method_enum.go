/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AuthorizationCodeAuthMethodEnum the model 'AuthorizationCodeAuthMethodEnum'
type AuthorizationCodeAuthMethodEnum string

// List of AuthorizationCodeAuthMethodEnum
const (
	AUTHORIZATIONCODEAUTHMETHODENUM_BASIC_AUTH AuthorizationCodeAuthMethodEnum = "basic_auth"
	AUTHORIZATIONCODEAUTHMETHODENUM_POST_BODY  AuthorizationCodeAuthMethodEnum = "post_body"
)

// All allowed values of AuthorizationCodeAuthMethodEnum enum
var AllowedAuthorizationCodeAuthMethodEnumEnumValues = []AuthorizationCodeAuthMethodEnum{
	"basic_auth",
	"post_body",
}

func (v *AuthorizationCodeAuthMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationCodeAuthMethodEnum(value)
	for _, existing := range AllowedAuthorizationCodeAuthMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationCodeAuthMethodEnum", value)
}

// NewAuthorizationCodeAuthMethodEnumFromValue returns a pointer to a valid AuthorizationCodeAuthMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationCodeAuthMethodEnumFromValue(v string) (*AuthorizationCodeAuthMethodEnum, error) {
	ev := AuthorizationCodeAuthMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationCodeAuthMethodEnum: valid values are %v", v, AllowedAuthorizationCodeAuthMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationCodeAuthMethodEnum) IsValid() bool {
	for _, existing := range AllowedAuthorizationCodeAuthMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationCodeAuthMethodEnum value
func (v AuthorizationCodeAuthMethodEnum) Ptr() *AuthorizationCodeAuthMethodEnum {
	return &v
}

type NullableAuthorizationCodeAuthMethodEnum struct {
	value *AuthorizationCodeAuthMethodEnum
	isSet bool
}

func (v NullableAuthorizationCodeAuthMethodEnum) Get() *AuthorizationCodeAuthMethodEnum {
	return v.value
}

func (v *NullableAuthorizationCodeAuthMethodEnum) Set(val *AuthorizationCodeAuthMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationCodeAuthMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationCodeAuthMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationCodeAuthMethodEnum(val *AuthorizationCodeAuthMethodEnum) *NullableAuthorizationCodeAuthMethodEnum {
	return &NullableAuthorizationCodeAuthMethodEnum{value: val, isSet: true}
}

func (v NullableAuthorizationCodeAuthMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationCodeAuthMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
