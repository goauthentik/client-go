/*
authentik

Making authentication simple.

API version: 2025.8.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TaskAggregatedStatusEnum the model 'TaskAggregatedStatusEnum'
type TaskAggregatedStatusEnum string

// List of TaskAggregatedStatusEnum
const (
	TASKAGGREGATEDSTATUSENUM_QUEUED   TaskAggregatedStatusEnum = "queued"
	TASKAGGREGATEDSTATUSENUM_CONSUMED TaskAggregatedStatusEnum = "consumed"
	TASKAGGREGATEDSTATUSENUM_REJECTED TaskAggregatedStatusEnum = "rejected"
	TASKAGGREGATEDSTATUSENUM_DONE     TaskAggregatedStatusEnum = "done"
	TASKAGGREGATEDSTATUSENUM_INFO     TaskAggregatedStatusEnum = "info"
	TASKAGGREGATEDSTATUSENUM_WARNING  TaskAggregatedStatusEnum = "warning"
	TASKAGGREGATEDSTATUSENUM_ERROR    TaskAggregatedStatusEnum = "error"
)

// All allowed values of TaskAggregatedStatusEnum enum
var AllowedTaskAggregatedStatusEnumEnumValues = []TaskAggregatedStatusEnum{
	"queued",
	"consumed",
	"rejected",
	"done",
	"info",
	"warning",
	"error",
}

func (v *TaskAggregatedStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskAggregatedStatusEnum(value)
	for _, existing := range AllowedTaskAggregatedStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskAggregatedStatusEnum", value)
}

// NewTaskAggregatedStatusEnumFromValue returns a pointer to a valid TaskAggregatedStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskAggregatedStatusEnumFromValue(v string) (*TaskAggregatedStatusEnum, error) {
	ev := TaskAggregatedStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskAggregatedStatusEnum: valid values are %v", v, AllowedTaskAggregatedStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskAggregatedStatusEnum) IsValid() bool {
	for _, existing := range AllowedTaskAggregatedStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskAggregatedStatusEnum value
func (v TaskAggregatedStatusEnum) Ptr() *TaskAggregatedStatusEnum {
	return &v
}

type NullableTaskAggregatedStatusEnum struct {
	value *TaskAggregatedStatusEnum
	isSet bool
}

func (v NullableTaskAggregatedStatusEnum) Get() *TaskAggregatedStatusEnum {
	return v.value
}

func (v *NullableTaskAggregatedStatusEnum) Set(val *TaskAggregatedStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskAggregatedStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskAggregatedStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskAggregatedStatusEnum(val *TaskAggregatedStatusEnum) *NullableTaskAggregatedStatusEnum {
	return &NullableTaskAggregatedStatusEnum{value: val, isSet: true}
}

func (v NullableTaskAggregatedStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskAggregatedStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
