/*
authentik

Making authentication simple.

API version: 2025.6.1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// InitialPermissionsModeEnum the model 'InitialPermissionsModeEnum'
type InitialPermissionsModeEnum string

// List of InitialPermissionsModeEnum
const (
	INITIALPERMISSIONSMODEENUM_USER InitialPermissionsModeEnum = "user"
	INITIALPERMISSIONSMODEENUM_ROLE InitialPermissionsModeEnum = "role"
)

// All allowed values of InitialPermissionsModeEnum enum
var AllowedInitialPermissionsModeEnumEnumValues = []InitialPermissionsModeEnum{
	"user",
	"role",
}

func (v *InitialPermissionsModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InitialPermissionsModeEnum(value)
	for _, existing := range AllowedInitialPermissionsModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InitialPermissionsModeEnum", value)
}

// NewInitialPermissionsModeEnumFromValue returns a pointer to a valid InitialPermissionsModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInitialPermissionsModeEnumFromValue(v string) (*InitialPermissionsModeEnum, error) {
	ev := InitialPermissionsModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InitialPermissionsModeEnum: valid values are %v", v, AllowedInitialPermissionsModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InitialPermissionsModeEnum) IsValid() bool {
	for _, existing := range AllowedInitialPermissionsModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InitialPermissionsModeEnum value
func (v InitialPermissionsModeEnum) Ptr() *InitialPermissionsModeEnum {
	return &v
}

type NullableInitialPermissionsModeEnum struct {
	value *InitialPermissionsModeEnum
	isSet bool
}

func (v NullableInitialPermissionsModeEnum) Get() *InitialPermissionsModeEnum {
	return v.value
}

func (v *NullableInitialPermissionsModeEnum) Set(val *InitialPermissionsModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialPermissionsModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialPermissionsModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialPermissionsModeEnum(val *InitialPermissionsModeEnum) *NullableInitialPermissionsModeEnum {
	return &NullableInitialPermissionsModeEnum{value: val, isSet: true}
}

func (v NullableInitialPermissionsModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialPermissionsModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
