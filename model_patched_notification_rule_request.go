/*
authentik

Making authentication simple.

API version: 2025.6.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PatchedNotificationRuleRequest NotificationRule Serializer
type PatchedNotificationRuleRequest struct {
	Name *string `json:"name,omitempty"`
	// Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
	Transports []string `json:"transports,omitempty"`
	// Controls which severity level the created notifications will have.
	Severity *SeverityEnum `json:"severity,omitempty"`
	// Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
	DestinationGroup NullableString `json:"destination_group,omitempty"`
	// When enabled, notification will be sent to user the user that triggered the event.When destination_group is configured, notification is sent to both.
	DestinationEventUser *bool `json:"destination_event_user,omitempty"`
}

// NewPatchedNotificationRuleRequest instantiates a new PatchedNotificationRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNotificationRuleRequest() *PatchedNotificationRuleRequest {
	this := PatchedNotificationRuleRequest{}
	return &this
}

// NewPatchedNotificationRuleRequestWithDefaults instantiates a new PatchedNotificationRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNotificationRuleRequestWithDefaults() *PatchedNotificationRuleRequest {
	this := PatchedNotificationRuleRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedNotificationRuleRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRuleRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedNotificationRuleRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedNotificationRuleRequest) SetName(v string) {
	o.Name = &v
}

// GetTransports returns the Transports field value if set, zero value otherwise.
func (o *PatchedNotificationRuleRequest) GetTransports() []string {
	if o == nil || o.Transports == nil {
		var ret []string
		return ret
	}
	return o.Transports
}

// GetTransportsOk returns a tuple with the Transports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRuleRequest) GetTransportsOk() ([]string, bool) {
	if o == nil || o.Transports == nil {
		return nil, false
	}
	return o.Transports, true
}

// HasTransports returns a boolean if a field has been set.
func (o *PatchedNotificationRuleRequest) HasTransports() bool {
	if o != nil && o.Transports != nil {
		return true
	}

	return false
}

// SetTransports gets a reference to the given []string and assigns it to the Transports field.
func (o *PatchedNotificationRuleRequest) SetTransports(v []string) {
	o.Transports = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *PatchedNotificationRuleRequest) GetSeverity() SeverityEnum {
	if o == nil || o.Severity == nil {
		var ret SeverityEnum
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRuleRequest) GetSeverityOk() (*SeverityEnum, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *PatchedNotificationRuleRequest) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given SeverityEnum and assigns it to the Severity field.
func (o *PatchedNotificationRuleRequest) SetSeverity(v SeverityEnum) {
	o.Severity = &v
}

// GetDestinationGroup returns the DestinationGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNotificationRuleRequest) GetDestinationGroup() string {
	if o == nil || o.DestinationGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationGroup.Get()
}

// GetDestinationGroupOk returns a tuple with the DestinationGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNotificationRuleRequest) GetDestinationGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationGroup.Get(), o.DestinationGroup.IsSet()
}

// HasDestinationGroup returns a boolean if a field has been set.
func (o *PatchedNotificationRuleRequest) HasDestinationGroup() bool {
	if o != nil && o.DestinationGroup.IsSet() {
		return true
	}

	return false
}

// SetDestinationGroup gets a reference to the given NullableString and assigns it to the DestinationGroup field.
func (o *PatchedNotificationRuleRequest) SetDestinationGroup(v string) {
	o.DestinationGroup.Set(&v)
}

// SetDestinationGroupNil sets the value for DestinationGroup to be an explicit nil
func (o *PatchedNotificationRuleRequest) SetDestinationGroupNil() {
	o.DestinationGroup.Set(nil)
}

// UnsetDestinationGroup ensures that no value is present for DestinationGroup, not even an explicit nil
func (o *PatchedNotificationRuleRequest) UnsetDestinationGroup() {
	o.DestinationGroup.Unset()
}

// GetDestinationEventUser returns the DestinationEventUser field value if set, zero value otherwise.
func (o *PatchedNotificationRuleRequest) GetDestinationEventUser() bool {
	if o == nil || o.DestinationEventUser == nil {
		var ret bool
		return ret
	}
	return *o.DestinationEventUser
}

// GetDestinationEventUserOk returns a tuple with the DestinationEventUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNotificationRuleRequest) GetDestinationEventUserOk() (*bool, bool) {
	if o == nil || o.DestinationEventUser == nil {
		return nil, false
	}
	return o.DestinationEventUser, true
}

// HasDestinationEventUser returns a boolean if a field has been set.
func (o *PatchedNotificationRuleRequest) HasDestinationEventUser() bool {
	if o != nil && o.DestinationEventUser != nil {
		return true
	}

	return false
}

// SetDestinationEventUser gets a reference to the given bool and assigns it to the DestinationEventUser field.
func (o *PatchedNotificationRuleRequest) SetDestinationEventUser(v bool) {
	o.DestinationEventUser = &v
}

func (o PatchedNotificationRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Transports != nil {
		toSerialize["transports"] = o.Transports
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.DestinationGroup.IsSet() {
		toSerialize["destination_group"] = o.DestinationGroup.Get()
	}
	if o.DestinationEventUser != nil {
		toSerialize["destination_event_user"] = o.DestinationEventUser
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedNotificationRuleRequest struct {
	value *PatchedNotificationRuleRequest
	isSet bool
}

func (v NullablePatchedNotificationRuleRequest) Get() *PatchedNotificationRuleRequest {
	return v.value
}

func (v *NullablePatchedNotificationRuleRequest) Set(val *PatchedNotificationRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNotificationRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNotificationRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNotificationRuleRequest(val *PatchedNotificationRuleRequest) *NullablePatchedNotificationRuleRequest {
	return &NullablePatchedNotificationRuleRequest{value: val, isSet: true}
}

func (v NullablePatchedNotificationRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNotificationRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
