/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UsedBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsedBy{}

// UsedBy A list of all objects referencing the queried object
type UsedBy struct {
	App       string           `json:"app"`
	ModelName string           `json:"model_name"`
	Pk        string           `json:"pk"`
	Name      string           `json:"name"`
	Action    UsedByActionEnum `json:"action"`
}

type _UsedBy UsedBy

// NewUsedBy instantiates a new UsedBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedBy(app string, modelName string, pk string, name string, action UsedByActionEnum) *UsedBy {
	this := UsedBy{}
	this.App = app
	this.ModelName = modelName
	this.Pk = pk
	this.Name = name
	this.Action = action
	return &this
}

// NewUsedByWithDefaults instantiates a new UsedBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedByWithDefaults() *UsedBy {
	this := UsedBy{}
	return &this
}

// GetApp returns the App field value
func (o *UsedBy) GetApp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *UsedBy) GetAppOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *UsedBy) SetApp(v string) {
	o.App = v
}

// GetModelName returns the ModelName field value
func (o *UsedBy) GetModelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value
// and a boolean to check if the value has been set.
func (o *UsedBy) GetModelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelName, true
}

// SetModelName sets field value
func (o *UsedBy) SetModelName(v string) {
	o.ModelName = v
}

// GetPk returns the Pk field value
func (o *UsedBy) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UsedBy) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UsedBy) SetPk(v string) {
	o.Pk = v
}

// GetName returns the Name field value
func (o *UsedBy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UsedBy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UsedBy) SetName(v string) {
	o.Name = v
}

// GetAction returns the Action field value
func (o *UsedBy) GetAction() UsedByActionEnum {
	if o == nil {
		var ret UsedByActionEnum
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UsedBy) GetActionOk() (*UsedByActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UsedBy) SetAction(v UsedByActionEnum) {
	o.Action = v
}

func (o UsedBy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsedBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app"] = o.App
	toSerialize["model_name"] = o.ModelName
	toSerialize["pk"] = o.Pk
	toSerialize["name"] = o.Name
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

func (o *UsedBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"app",
		"model_name",
		"pk",
		"name",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsedBy := _UsedBy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsedBy)

	if err != nil {
		return err
	}

	*o = UsedBy(varUsedBy)

	return err
}

type NullableUsedBy struct {
	value *UsedBy
	isSet bool
}

func (v NullableUsedBy) Get() *UsedBy {
	return v.value
}

func (v *NullableUsedBy) Set(val *UsedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedBy(val *UsedBy) *NullableUsedBy {
	return &NullableUsedBy{value: val, isSet: true}
}

func (v NullableUsedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
