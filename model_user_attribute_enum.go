/*
authentik

Making authentication simple.

API version: 2025.4.1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// UserAttributeEnum the model 'UserAttributeEnum'
type UserAttributeEnum string

// List of UserAttributeEnum
const (
	USERATTRIBUTEENUM_USERNAME UserAttributeEnum = "username"
	USERATTRIBUTEENUM_EMAIL    UserAttributeEnum = "email"
)

// All allowed values of UserAttributeEnum enum
var AllowedUserAttributeEnumEnumValues = []UserAttributeEnum{
	"username",
	"email",
}

func (v *UserAttributeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserAttributeEnum(value)
	for _, existing := range AllowedUserAttributeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserAttributeEnum", value)
}

// NewUserAttributeEnumFromValue returns a pointer to a valid UserAttributeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserAttributeEnumFromValue(v string) (*UserAttributeEnum, error) {
	ev := UserAttributeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserAttributeEnum: valid values are %v", v, AllowedUserAttributeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserAttributeEnum) IsValid() bool {
	for _, existing := range AllowedUserAttributeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserAttributeEnum value
func (v UserAttributeEnum) Ptr() *UserAttributeEnum {
	return &v
}

type NullableUserAttributeEnum struct {
	value *UserAttributeEnum
	isSet bool
}

func (v NullableUserAttributeEnum) Get() *UserAttributeEnum {
	return v.value
}

func (v *NullableUserAttributeEnum) Set(val *UserAttributeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAttributeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAttributeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAttributeEnum(val *UserAttributeEnum) *NullableUserAttributeEnum {
	return &NullableUserAttributeEnum{value: val, isSet: true}
}

func (v NullableUserAttributeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAttributeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
