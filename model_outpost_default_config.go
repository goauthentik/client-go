/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OutpostDefaultConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutpostDefaultConfig{}

// OutpostDefaultConfig Global default outpost config
type OutpostDefaultConfig struct {
	Config map[string]interface{} `json:"config"`
}

type _OutpostDefaultConfig OutpostDefaultConfig

// NewOutpostDefaultConfig instantiates a new OutpostDefaultConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutpostDefaultConfig(config map[string]interface{}) *OutpostDefaultConfig {
	this := OutpostDefaultConfig{}
	this.Config = config
	return &this
}

// NewOutpostDefaultConfigWithDefaults instantiates a new OutpostDefaultConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutpostDefaultConfigWithDefaults() *OutpostDefaultConfig {
	this := OutpostDefaultConfig{}
	return &this
}

// GetConfig returns the Config field value
func (o *OutpostDefaultConfig) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *OutpostDefaultConfig) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *OutpostDefaultConfig) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o OutpostDefaultConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutpostDefaultConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *OutpostDefaultConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutpostDefaultConfig := _OutpostDefaultConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutpostDefaultConfig)

	if err != nil {
		return err
	}

	*o = OutpostDefaultConfig(varOutpostDefaultConfig)

	return err
}

type NullableOutpostDefaultConfig struct {
	value *OutpostDefaultConfig
	isSet bool
}

func (v NullableOutpostDefaultConfig) Get() *OutpostDefaultConfig {
	return v.value
}

func (v *NullableOutpostDefaultConfig) Set(val *OutpostDefaultConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOutpostDefaultConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOutpostDefaultConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutpostDefaultConfig(val *OutpostDefaultConfig) *NullableOutpostDefaultConfig {
	return &NullableOutpostDefaultConfig{value: val, isSet: true}
}

func (v NullableOutpostDefaultConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutpostDefaultConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
