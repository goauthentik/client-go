/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SCIMSourceUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SCIMSourceUserRequest{}

// SCIMSourceUserRequest SCIMSourceUser Serializer
type SCIMSourceUserRequest struct {
	Id         string      `json:"id"`
	User       int32       `json:"user"`
	Source     string      `json:"source"`
	Attributes interface{} `json:"attributes,omitempty"`
}

type _SCIMSourceUserRequest SCIMSourceUserRequest

// NewSCIMSourceUserRequest instantiates a new SCIMSourceUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCIMSourceUserRequest(id string, user int32, source string) *SCIMSourceUserRequest {
	this := SCIMSourceUserRequest{}
	this.Id = id
	this.User = user
	this.Source = source
	return &this
}

// NewSCIMSourceUserRequestWithDefaults instantiates a new SCIMSourceUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCIMSourceUserRequestWithDefaults() *SCIMSourceUserRequest {
	this := SCIMSourceUserRequest{}
	return &this
}

// GetId returns the Id field value
func (o *SCIMSourceUserRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SCIMSourceUserRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SCIMSourceUserRequest) SetId(v string) {
	o.Id = v
}

// GetUser returns the User field value
func (o *SCIMSourceUserRequest) GetUser() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *SCIMSourceUserRequest) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *SCIMSourceUserRequest) SetUser(v int32) {
	o.User = v
}

// GetSource returns the Source field value
func (o *SCIMSourceUserRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *SCIMSourceUserRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *SCIMSourceUserRequest) SetSource(v string) {
	o.Source = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SCIMSourceUserRequest) GetAttributes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SCIMSourceUserRequest) GetAttributesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return &o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SCIMSourceUserRequest) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given interface{} and assigns it to the Attributes field.
func (o *SCIMSourceUserRequest) SetAttributes(v interface{}) {
	o.Attributes = v
}

func (o SCIMSourceUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SCIMSourceUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user"] = o.User
	toSerialize["source"] = o.Source
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

func (o *SCIMSourceUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSCIMSourceUserRequest := _SCIMSourceUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSCIMSourceUserRequest)

	if err != nil {
		return err
	}

	*o = SCIMSourceUserRequest(varSCIMSourceUserRequest)

	return err
}

type NullableSCIMSourceUserRequest struct {
	value *SCIMSourceUserRequest
	isSet bool
}

func (v NullableSCIMSourceUserRequest) Get() *SCIMSourceUserRequest {
	return v.value
}

func (v *NullableSCIMSourceUserRequest) Set(val *SCIMSourceUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSCIMSourceUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSCIMSourceUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCIMSourceUserRequest(val *SCIMSourceUserRequest) *NullableSCIMSourceUserRequest {
	return &NullableSCIMSourceUserRequest{value: val, isSet: true}
}

func (v NullableSCIMSourceUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCIMSourceUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
