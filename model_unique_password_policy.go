/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UniquePasswordPolicy Password Uniqueness Policy Serializer
type UniquePasswordPolicy struct {
	Pk   string `json:"pk"`
	Name string `json:"name"`
	// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
	ExecutionLogging *bool `json:"execution_logging,omitempty"`
	// Get object component so that we know how to edit the object
	Component string `json:"component"`
	// Return object's verbose_name
	VerboseName string `json:"verbose_name"`
	// Return object's plural verbose_name
	VerboseNamePlural string `json:"verbose_name_plural"`
	// Return internal model name
	MetaModelName string `json:"meta_model_name"`
	// Return objects policy is bound to
	BoundTo int32 `json:"bound_to"`
	// Field key to check, field keys defined in Prompt stages are available.
	PasswordField *string `json:"password_field,omitempty"`
	// Number of passwords to check against.
	NumHistoricalPasswords *int32 `json:"num_historical_passwords,omitempty"`
}

// NewUniquePasswordPolicy instantiates a new UniquePasswordPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniquePasswordPolicy(pk string, name string, component string, verboseName string, verboseNamePlural string, metaModelName string, boundTo int32) *UniquePasswordPolicy {
	this := UniquePasswordPolicy{}
	this.Pk = pk
	this.Name = name
	this.Component = component
	this.VerboseName = verboseName
	this.VerboseNamePlural = verboseNamePlural
	this.MetaModelName = metaModelName
	this.BoundTo = boundTo
	return &this
}

// NewUniquePasswordPolicyWithDefaults instantiates a new UniquePasswordPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniquePasswordPolicyWithDefaults() *UniquePasswordPolicy {
	this := UniquePasswordPolicy{}
	return &this
}

// GetPk returns the Pk field value
func (o *UniquePasswordPolicy) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UniquePasswordPolicy) SetPk(v string) {
	o.Pk = v
}

// GetName returns the Name field value
func (o *UniquePasswordPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniquePasswordPolicy) SetName(v string) {
	o.Name = v
}

// GetExecutionLogging returns the ExecutionLogging field value if set, zero value otherwise.
func (o *UniquePasswordPolicy) GetExecutionLogging() bool {
	if o == nil || o.ExecutionLogging == nil {
		var ret bool
		return ret
	}
	return *o.ExecutionLogging
}

// GetExecutionLoggingOk returns a tuple with the ExecutionLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetExecutionLoggingOk() (*bool, bool) {
	if o == nil || o.ExecutionLogging == nil {
		return nil, false
	}
	return o.ExecutionLogging, true
}

// HasExecutionLogging returns a boolean if a field has been set.
func (o *UniquePasswordPolicy) HasExecutionLogging() bool {
	if o != nil && o.ExecutionLogging != nil {
		return true
	}

	return false
}

// SetExecutionLogging gets a reference to the given bool and assigns it to the ExecutionLogging field.
func (o *UniquePasswordPolicy) SetExecutionLogging(v bool) {
	o.ExecutionLogging = &v
}

// GetComponent returns the Component field value
func (o *UniquePasswordPolicy) GetComponent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Component
}

// GetComponentOk returns a tuple with the Component field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Component, true
}

// SetComponent sets field value
func (o *UniquePasswordPolicy) SetComponent(v string) {
	o.Component = v
}

// GetVerboseName returns the VerboseName field value
func (o *UniquePasswordPolicy) GetVerboseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VerboseName
}

// GetVerboseNameOk returns a tuple with the VerboseName field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetVerboseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerboseName, true
}

// SetVerboseName sets field value
func (o *UniquePasswordPolicy) SetVerboseName(v string) {
	o.VerboseName = v
}

// GetVerboseNamePlural returns the VerboseNamePlural field value
func (o *UniquePasswordPolicy) GetVerboseNamePlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VerboseNamePlural
}

// GetVerboseNamePluralOk returns a tuple with the VerboseNamePlural field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetVerboseNamePluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerboseNamePlural, true
}

// SetVerboseNamePlural sets field value
func (o *UniquePasswordPolicy) SetVerboseNamePlural(v string) {
	o.VerboseNamePlural = v
}

// GetMetaModelName returns the MetaModelName field value
func (o *UniquePasswordPolicy) GetMetaModelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaModelName
}

// GetMetaModelNameOk returns a tuple with the MetaModelName field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetMetaModelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaModelName, true
}

// SetMetaModelName sets field value
func (o *UniquePasswordPolicy) SetMetaModelName(v string) {
	o.MetaModelName = v
}

// GetBoundTo returns the BoundTo field value
func (o *UniquePasswordPolicy) GetBoundTo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BoundTo
}

// GetBoundToOk returns a tuple with the BoundTo field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetBoundToOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoundTo, true
}

// SetBoundTo sets field value
func (o *UniquePasswordPolicy) SetBoundTo(v int32) {
	o.BoundTo = v
}

// GetPasswordField returns the PasswordField field value if set, zero value otherwise.
func (o *UniquePasswordPolicy) GetPasswordField() string {
	if o == nil || o.PasswordField == nil {
		var ret string
		return ret
	}
	return *o.PasswordField
}

// GetPasswordFieldOk returns a tuple with the PasswordField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetPasswordFieldOk() (*string, bool) {
	if o == nil || o.PasswordField == nil {
		return nil, false
	}
	return o.PasswordField, true
}

// HasPasswordField returns a boolean if a field has been set.
func (o *UniquePasswordPolicy) HasPasswordField() bool {
	if o != nil && o.PasswordField != nil {
		return true
	}

	return false
}

// SetPasswordField gets a reference to the given string and assigns it to the PasswordField field.
func (o *UniquePasswordPolicy) SetPasswordField(v string) {
	o.PasswordField = &v
}

// GetNumHistoricalPasswords returns the NumHistoricalPasswords field value if set, zero value otherwise.
func (o *UniquePasswordPolicy) GetNumHistoricalPasswords() int32 {
	if o == nil || o.NumHistoricalPasswords == nil {
		var ret int32
		return ret
	}
	return *o.NumHistoricalPasswords
}

// GetNumHistoricalPasswordsOk returns a tuple with the NumHistoricalPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicy) GetNumHistoricalPasswordsOk() (*int32, bool) {
	if o == nil || o.NumHistoricalPasswords == nil {
		return nil, false
	}
	return o.NumHistoricalPasswords, true
}

// HasNumHistoricalPasswords returns a boolean if a field has been set.
func (o *UniquePasswordPolicy) HasNumHistoricalPasswords() bool {
	if o != nil && o.NumHistoricalPasswords != nil {
		return true
	}

	return false
}

// SetNumHistoricalPasswords gets a reference to the given int32 and assigns it to the NumHistoricalPasswords field.
func (o *UniquePasswordPolicy) SetNumHistoricalPasswords(v int32) {
	o.NumHistoricalPasswords = &v
}

func (o UniquePasswordPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExecutionLogging != nil {
		toSerialize["execution_logging"] = o.ExecutionLogging
	}
	if true {
		toSerialize["component"] = o.Component
	}
	if true {
		toSerialize["verbose_name"] = o.VerboseName
	}
	if true {
		toSerialize["verbose_name_plural"] = o.VerboseNamePlural
	}
	if true {
		toSerialize["meta_model_name"] = o.MetaModelName
	}
	if true {
		toSerialize["bound_to"] = o.BoundTo
	}
	if o.PasswordField != nil {
		toSerialize["password_field"] = o.PasswordField
	}
	if o.NumHistoricalPasswords != nil {
		toSerialize["num_historical_passwords"] = o.NumHistoricalPasswords
	}
	return json.Marshal(toSerialize)
}

type NullableUniquePasswordPolicy struct {
	value *UniquePasswordPolicy
	isSet bool
}

func (v NullableUniquePasswordPolicy) Get() *UniquePasswordPolicy {
	return v.value
}

func (v *NullableUniquePasswordPolicy) Set(val *UniquePasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUniquePasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUniquePasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniquePasswordPolicy(val *UniquePasswordPolicy) *NullableUniquePasswordPolicy {
	return &NullableUniquePasswordPolicy{value: val, isSet: true}
}

func (v NullableUniquePasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniquePasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
