/*
authentik

Making authentication simple.

API version: 2024.12.1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// KadminTypeEnum the model 'KadminTypeEnum'
type KadminTypeEnum string

// List of KadminTypeEnum
const (
	KADMINTYPEENUM_MIT     KadminTypeEnum = "MIT"
	KADMINTYPEENUM_HEIMDAL KadminTypeEnum = "Heimdal"
	KADMINTYPEENUM_OTHER   KadminTypeEnum = "other"
)

// All allowed values of KadminTypeEnum enum
var AllowedKadminTypeEnumEnumValues = []KadminTypeEnum{
	"MIT",
	"Heimdal",
	"other",
}

func (v *KadminTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KadminTypeEnum(value)
	for _, existing := range AllowedKadminTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KadminTypeEnum", value)
}

// NewKadminTypeEnumFromValue returns a pointer to a valid KadminTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKadminTypeEnumFromValue(v string) (*KadminTypeEnum, error) {
	ev := KadminTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KadminTypeEnum: valid values are %v", v, AllowedKadminTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KadminTypeEnum) IsValid() bool {
	for _, existing := range AllowedKadminTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KadminTypeEnum value
func (v KadminTypeEnum) Ptr() *KadminTypeEnum {
	return &v
}

type NullableKadminTypeEnum struct {
	value *KadminTypeEnum
	isSet bool
}

func (v NullableKadminTypeEnum) Get() *KadminTypeEnum {
	return v.value
}

func (v *NullableKadminTypeEnum) Set(val *KadminTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKadminTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKadminTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKadminTypeEnum(val *KadminTypeEnum) *NullableKadminTypeEnum {
	return &NullableKadminTypeEnum{value: val, isSet: true}
}

func (v NullableKadminTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKadminTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
