/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicyTestResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyTestResult{}

// PolicyTestResult result of a policy test
type PolicyTestResult struct {
	Passing     bool       `json:"passing"`
	Messages    []string   `json:"messages"`
	LogMessages []LogEvent `json:"log_messages"`
}

type _PolicyTestResult PolicyTestResult

// NewPolicyTestResult instantiates a new PolicyTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyTestResult(passing bool, messages []string, logMessages []LogEvent) *PolicyTestResult {
	this := PolicyTestResult{}
	this.Passing = passing
	this.Messages = messages
	this.LogMessages = logMessages
	return &this
}

// NewPolicyTestResultWithDefaults instantiates a new PolicyTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTestResultWithDefaults() *PolicyTestResult {
	this := PolicyTestResult{}
	return &this
}

// GetPassing returns the Passing field value
func (o *PolicyTestResult) GetPassing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Passing
}

// GetPassingOk returns a tuple with the Passing field value
// and a boolean to check if the value has been set.
func (o *PolicyTestResult) GetPassingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Passing, true
}

// SetPassing sets field value
func (o *PolicyTestResult) SetPassing(v bool) {
	o.Passing = v
}

// GetMessages returns the Messages field value
func (o *PolicyTestResult) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *PolicyTestResult) GetMessagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *PolicyTestResult) SetMessages(v []string) {
	o.Messages = v
}

// GetLogMessages returns the LogMessages field value
func (o *PolicyTestResult) GetLogMessages() []LogEvent {
	if o == nil {
		var ret []LogEvent
		return ret
	}

	return o.LogMessages
}

// GetLogMessagesOk returns a tuple with the LogMessages field value
// and a boolean to check if the value has been set.
func (o *PolicyTestResult) GetLogMessagesOk() ([]LogEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogMessages, true
}

// SetLogMessages sets field value
func (o *PolicyTestResult) SetLogMessages(v []LogEvent) {
	o.LogMessages = v
}

func (o PolicyTestResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["passing"] = o.Passing
	toSerialize["messages"] = o.Messages
	toSerialize["log_messages"] = o.LogMessages
	return toSerialize, nil
}

func (o *PolicyTestResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"passing",
		"messages",
		"log_messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyTestResult := _PolicyTestResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyTestResult)

	if err != nil {
		return err
	}

	*o = PolicyTestResult(varPolicyTestResult)

	return err
}

type NullablePolicyTestResult struct {
	value *PolicyTestResult
	isSet bool
}

func (v NullablePolicyTestResult) Get() *PolicyTestResult {
	return v.value
}

func (v *NullablePolicyTestResult) Set(val *PolicyTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTestResult(val *PolicyTestResult) *NullablePolicyTestResult {
	return &NullablePolicyTestResult{value: val, isSet: true}
}

func (v NullablePolicyTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
