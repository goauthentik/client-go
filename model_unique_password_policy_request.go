/*
authentik

Making authentication simple.

API version: 2025.6.3
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UniquePasswordPolicyRequest Password Uniqueness Policy Serializer
type UniquePasswordPolicyRequest struct {
	Name string `json:"name"`
	// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
	ExecutionLogging *bool `json:"execution_logging,omitempty"`
	// Field key to check, field keys defined in Prompt stages are available.
	PasswordField *string `json:"password_field,omitempty"`
	// Number of passwords to check against.
	NumHistoricalPasswords *int32 `json:"num_historical_passwords,omitempty"`
}

// NewUniquePasswordPolicyRequest instantiates a new UniquePasswordPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniquePasswordPolicyRequest(name string) *UniquePasswordPolicyRequest {
	this := UniquePasswordPolicyRequest{}
	this.Name = name
	return &this
}

// NewUniquePasswordPolicyRequestWithDefaults instantiates a new UniquePasswordPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniquePasswordPolicyRequestWithDefaults() *UniquePasswordPolicyRequest {
	this := UniquePasswordPolicyRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UniquePasswordPolicyRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicyRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UniquePasswordPolicyRequest) SetName(v string) {
	o.Name = v
}

// GetExecutionLogging returns the ExecutionLogging field value if set, zero value otherwise.
func (o *UniquePasswordPolicyRequest) GetExecutionLogging() bool {
	if o == nil || o.ExecutionLogging == nil {
		var ret bool
		return ret
	}
	return *o.ExecutionLogging
}

// GetExecutionLoggingOk returns a tuple with the ExecutionLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicyRequest) GetExecutionLoggingOk() (*bool, bool) {
	if o == nil || o.ExecutionLogging == nil {
		return nil, false
	}
	return o.ExecutionLogging, true
}

// HasExecutionLogging returns a boolean if a field has been set.
func (o *UniquePasswordPolicyRequest) HasExecutionLogging() bool {
	if o != nil && o.ExecutionLogging != nil {
		return true
	}

	return false
}

// SetExecutionLogging gets a reference to the given bool and assigns it to the ExecutionLogging field.
func (o *UniquePasswordPolicyRequest) SetExecutionLogging(v bool) {
	o.ExecutionLogging = &v
}

// GetPasswordField returns the PasswordField field value if set, zero value otherwise.
func (o *UniquePasswordPolicyRequest) GetPasswordField() string {
	if o == nil || o.PasswordField == nil {
		var ret string
		return ret
	}
	return *o.PasswordField
}

// GetPasswordFieldOk returns a tuple with the PasswordField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicyRequest) GetPasswordFieldOk() (*string, bool) {
	if o == nil || o.PasswordField == nil {
		return nil, false
	}
	return o.PasswordField, true
}

// HasPasswordField returns a boolean if a field has been set.
func (o *UniquePasswordPolicyRequest) HasPasswordField() bool {
	if o != nil && o.PasswordField != nil {
		return true
	}

	return false
}

// SetPasswordField gets a reference to the given string and assigns it to the PasswordField field.
func (o *UniquePasswordPolicyRequest) SetPasswordField(v string) {
	o.PasswordField = &v
}

// GetNumHistoricalPasswords returns the NumHistoricalPasswords field value if set, zero value otherwise.
func (o *UniquePasswordPolicyRequest) GetNumHistoricalPasswords() int32 {
	if o == nil || o.NumHistoricalPasswords == nil {
		var ret int32
		return ret
	}
	return *o.NumHistoricalPasswords
}

// GetNumHistoricalPasswordsOk returns a tuple with the NumHistoricalPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniquePasswordPolicyRequest) GetNumHistoricalPasswordsOk() (*int32, bool) {
	if o == nil || o.NumHistoricalPasswords == nil {
		return nil, false
	}
	return o.NumHistoricalPasswords, true
}

// HasNumHistoricalPasswords returns a boolean if a field has been set.
func (o *UniquePasswordPolicyRequest) HasNumHistoricalPasswords() bool {
	if o != nil && o.NumHistoricalPasswords != nil {
		return true
	}

	return false
}

// SetNumHistoricalPasswords gets a reference to the given int32 and assigns it to the NumHistoricalPasswords field.
func (o *UniquePasswordPolicyRequest) SetNumHistoricalPasswords(v int32) {
	o.NumHistoricalPasswords = &v
}

func (o UniquePasswordPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExecutionLogging != nil {
		toSerialize["execution_logging"] = o.ExecutionLogging
	}
	if o.PasswordField != nil {
		toSerialize["password_field"] = o.PasswordField
	}
	if o.NumHistoricalPasswords != nil {
		toSerialize["num_historical_passwords"] = o.NumHistoricalPasswords
	}
	return json.Marshal(toSerialize)
}

type NullableUniquePasswordPolicyRequest struct {
	value *UniquePasswordPolicyRequest
	isSet bool
}

func (v NullableUniquePasswordPolicyRequest) Get() *UniquePasswordPolicyRequest {
	return v.value
}

func (v *NullableUniquePasswordPolicyRequest) Set(val *UniquePasswordPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUniquePasswordPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUniquePasswordPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniquePasswordPolicyRequest(val *UniquePasswordPolicyRequest) *NullableUniquePasswordPolicyRequest {
	return &NullableUniquePasswordPolicyRequest{value: val, isSet: true}
}

func (v NullableUniquePasswordPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniquePasswordPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
