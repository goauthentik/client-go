/*
authentik

Making authentication simple.

API version: 2021.8.4
Contact: hello@beryju.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CryptoApiService CryptoApi service
type CryptoApiService service

type ApiCryptoCertificatekeypairsCreateRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	certificateKeyPairRequest *CertificateKeyPairRequest
}

func (r ApiCryptoCertificatekeypairsCreateRequest) CertificateKeyPairRequest(certificateKeyPairRequest CertificateKeyPairRequest) ApiCryptoCertificatekeypairsCreateRequest {
	r.certificateKeyPairRequest = &certificateKeyPairRequest
	return r
}

func (r ApiCryptoCertificatekeypairsCreateRequest) Execute() (CertificateKeyPair, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsCreateExecute(r)
}

/*
CryptoCertificatekeypairsCreate Method for CryptoCertificatekeypairsCreate

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCryptoCertificatekeypairsCreateRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsCreate(ctx _context.Context) ApiCryptoCertificatekeypairsCreateRequest {
	return ApiCryptoCertificatekeypairsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CertificateKeyPair
func (a *CryptoApiService) CryptoCertificatekeypairsCreateExecute(r ApiCryptoCertificatekeypairsCreateRequest) (CertificateKeyPair, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.certificateKeyPairRequest == nil {
		return localVarReturnValue, nil, reportError("certificateKeyPairRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.certificateKeyPairRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsDestroyRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
}


func (r ApiCryptoCertificatekeypairsDestroyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsDestroyExecute(r)
}

/*
CryptoCertificatekeypairsDestroy Method for CryptoCertificatekeypairsDestroy

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsDestroyRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsDestroy(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsDestroyRequest {
	return ApiCryptoCertificatekeypairsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
func (a *CryptoApiService) CryptoCertificatekeypairsDestroyExecute(r ApiCryptoCertificatekeypairsDestroyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsDestroy")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsGenerateCreateRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	certificateGenerationRequest *CertificateGenerationRequest
}

func (r ApiCryptoCertificatekeypairsGenerateCreateRequest) CertificateGenerationRequest(certificateGenerationRequest CertificateGenerationRequest) ApiCryptoCertificatekeypairsGenerateCreateRequest {
	r.certificateGenerationRequest = &certificateGenerationRequest
	return r
}

func (r ApiCryptoCertificatekeypairsGenerateCreateRequest) Execute() (CertificateKeyPair, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsGenerateCreateExecute(r)
}

/*
CryptoCertificatekeypairsGenerateCreate Method for CryptoCertificatekeypairsGenerateCreate

Generate a new, self-signed certificate-key pair

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCryptoCertificatekeypairsGenerateCreateRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsGenerateCreate(ctx _context.Context) ApiCryptoCertificatekeypairsGenerateCreateRequest {
	return ApiCryptoCertificatekeypairsGenerateCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CertificateKeyPair
func (a *CryptoApiService) CryptoCertificatekeypairsGenerateCreateExecute(r ApiCryptoCertificatekeypairsGenerateCreateRequest) (CertificateKeyPair, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsGenerateCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/generate/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.certificateGenerationRequest == nil {
		return localVarReturnValue, nil, reportError("certificateGenerationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.certificateGenerationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsListRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	hasKey *bool
	name *string
	ordering *string
	page *int32
	pageSize *int32
	search *string
}

// Only return certificate-key pairs with keys
func (r ApiCryptoCertificatekeypairsListRequest) HasKey(hasKey bool) ApiCryptoCertificatekeypairsListRequest {
	r.hasKey = &hasKey
	return r
}
func (r ApiCryptoCertificatekeypairsListRequest) Name(name string) ApiCryptoCertificatekeypairsListRequest {
	r.name = &name
	return r
}
// Which field to use when ordering the results.
func (r ApiCryptoCertificatekeypairsListRequest) Ordering(ordering string) ApiCryptoCertificatekeypairsListRequest {
	r.ordering = &ordering
	return r
}
// A page number within the paginated result set.
func (r ApiCryptoCertificatekeypairsListRequest) Page(page int32) ApiCryptoCertificatekeypairsListRequest {
	r.page = &page
	return r
}
// Number of results to return per page.
func (r ApiCryptoCertificatekeypairsListRequest) PageSize(pageSize int32) ApiCryptoCertificatekeypairsListRequest {
	r.pageSize = &pageSize
	return r
}
// A search term.
func (r ApiCryptoCertificatekeypairsListRequest) Search(search string) ApiCryptoCertificatekeypairsListRequest {
	r.search = &search
	return r
}

func (r ApiCryptoCertificatekeypairsListRequest) Execute() (PaginatedCertificateKeyPairList, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsListExecute(r)
}

/*
CryptoCertificatekeypairsList Method for CryptoCertificatekeypairsList

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCryptoCertificatekeypairsListRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsList(ctx _context.Context) ApiCryptoCertificatekeypairsListRequest {
	return ApiCryptoCertificatekeypairsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCertificateKeyPairList
func (a *CryptoApiService) CryptoCertificatekeypairsListExecute(r ApiCryptoCertificatekeypairsListRequest) (PaginatedCertificateKeyPairList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedCertificateKeyPairList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.hasKey != nil {
		localVarQueryParams.Add("has_key", parameterToString(*r.hasKey, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.ordering != nil {
		localVarQueryParams.Add("ordering", parameterToString(*r.ordering, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
	patchedCertificateKeyPairRequest *PatchedCertificateKeyPairRequest
}

func (r ApiCryptoCertificatekeypairsPartialUpdateRequest) PatchedCertificateKeyPairRequest(patchedCertificateKeyPairRequest PatchedCertificateKeyPairRequest) ApiCryptoCertificatekeypairsPartialUpdateRequest {
	r.patchedCertificateKeyPairRequest = &patchedCertificateKeyPairRequest
	return r
}

func (r ApiCryptoCertificatekeypairsPartialUpdateRequest) Execute() (CertificateKeyPair, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsPartialUpdateExecute(r)
}

/*
CryptoCertificatekeypairsPartialUpdate Method for CryptoCertificatekeypairsPartialUpdate

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsPartialUpdateRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsPartialUpdate(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsPartialUpdateRequest {
	return ApiCryptoCertificatekeypairsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return CertificateKeyPair
func (a *CryptoApiService) CryptoCertificatekeypairsPartialUpdateExecute(r ApiCryptoCertificatekeypairsPartialUpdateRequest) (CertificateKeyPair, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCertificateKeyPairRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsRetrieveRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
}


func (r ApiCryptoCertificatekeypairsRetrieveRequest) Execute() (CertificateKeyPair, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsRetrieveExecute(r)
}

/*
CryptoCertificatekeypairsRetrieve Method for CryptoCertificatekeypairsRetrieve

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsRetrieveRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsRetrieve(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsRetrieveRequest {
	return ApiCryptoCertificatekeypairsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return CertificateKeyPair
func (a *CryptoApiService) CryptoCertificatekeypairsRetrieveExecute(r ApiCryptoCertificatekeypairsRetrieveRequest) (CertificateKeyPair, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsUpdateRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
	certificateKeyPairRequest *CertificateKeyPairRequest
}

func (r ApiCryptoCertificatekeypairsUpdateRequest) CertificateKeyPairRequest(certificateKeyPairRequest CertificateKeyPairRequest) ApiCryptoCertificatekeypairsUpdateRequest {
	r.certificateKeyPairRequest = &certificateKeyPairRequest
	return r
}

func (r ApiCryptoCertificatekeypairsUpdateRequest) Execute() (CertificateKeyPair, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsUpdateExecute(r)
}

/*
CryptoCertificatekeypairsUpdate Method for CryptoCertificatekeypairsUpdate

CertificateKeyPair Viewset

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsUpdateRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsUpdate(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsUpdateRequest {
	return ApiCryptoCertificatekeypairsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return CertificateKeyPair
func (a *CryptoApiService) CryptoCertificatekeypairsUpdateExecute(r ApiCryptoCertificatekeypairsUpdateRequest) (CertificateKeyPair, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateKeyPair
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.certificateKeyPairRequest == nil {
		return localVarReturnValue, nil, reportError("certificateKeyPairRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.certificateKeyPairRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsUsedByListRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
}


func (r ApiCryptoCertificatekeypairsUsedByListRequest) Execute() ([]UsedBy, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsUsedByListExecute(r)
}

/*
CryptoCertificatekeypairsUsedByList Method for CryptoCertificatekeypairsUsedByList

Get a list of all objects that use this object

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsUsedByListRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsUsedByList(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsUsedByListRequest {
	return ApiCryptoCertificatekeypairsUsedByListRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return []UsedBy
func (a *CryptoApiService) CryptoCertificatekeypairsUsedByListExecute(r ApiCryptoCertificatekeypairsUsedByListRequest) ([]UsedBy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []UsedBy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsUsedByList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/used_by/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
	download *bool
}

func (r ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest) Download(download bool) ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest {
	r.download = &download
	return r
}

func (r ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest) Execute() (CertificateData, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsViewCertificateRetrieveExecute(r)
}

/*
CryptoCertificatekeypairsViewCertificateRetrieve Method for CryptoCertificatekeypairsViewCertificateRetrieve

Return certificate-key pairs certificate and log access

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsViewCertificateRetrieve(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest {
	return ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return CertificateData
func (a *CryptoApiService) CryptoCertificatekeypairsViewCertificateRetrieveExecute(r ApiCryptoCertificatekeypairsViewCertificateRetrieveRequest) (CertificateData, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsViewCertificateRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/view_certificate/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.download != nil {
		localVarQueryParams.Add("download", parameterToString(*r.download, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest struct {
	ctx _context.Context
	ApiService *CryptoApiService
	kpUuid string
	download *bool
}

func (r ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest) Download(download bool) ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest {
	r.download = &download
	return r
}

func (r ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest) Execute() (CertificateData, *_nethttp.Response, error) {
	return r.ApiService.CryptoCertificatekeypairsViewPrivateKeyRetrieveExecute(r)
}

/*
CryptoCertificatekeypairsViewPrivateKeyRetrieve Method for CryptoCertificatekeypairsViewPrivateKeyRetrieve

Return certificate-key pairs private key and log access

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param kpUuid A UUID string identifying this Certificate-Key Pair.
 @return ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest
*/
func (a *CryptoApiService) CryptoCertificatekeypairsViewPrivateKeyRetrieve(ctx _context.Context, kpUuid string) ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest {
	return ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		kpUuid: kpUuid,
	}
}

// Execute executes the request
//  @return CertificateData
func (a *CryptoApiService) CryptoCertificatekeypairsViewPrivateKeyRetrieveExecute(r ApiCryptoCertificatekeypairsViewPrivateKeyRetrieveRequest) (CertificateData, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificateData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CryptoApiService.CryptoCertificatekeypairsViewPrivateKeyRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crypto/certificatekeypairs/{kp_uuid}/view_private_key/"
	localVarPath = strings.Replace(localVarPath, "{"+"kp_uuid"+"}", _neturl.PathEscape(parameterToString(r.kpUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.download != nil {
		localVarQueryParams.Add("download", parameterToString(*r.download, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authentik"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
