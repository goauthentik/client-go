/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationTransportTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationTransportTest{}

// NotificationTransportTest Notification test serializer
type NotificationTransportTest struct {
	Messages []string `json:"messages"`
}

type _NotificationTransportTest NotificationTransportTest

// NewNotificationTransportTest instantiates a new NotificationTransportTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationTransportTest(messages []string) *NotificationTransportTest {
	this := NotificationTransportTest{}
	this.Messages = messages
	return &this
}

// NewNotificationTransportTestWithDefaults instantiates a new NotificationTransportTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTransportTestWithDefaults() *NotificationTransportTest {
	this := NotificationTransportTest{}
	return &this
}

// GetMessages returns the Messages field value
func (o *NotificationTransportTest) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *NotificationTransportTest) GetMessagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *NotificationTransportTest) SetMessages(v []string) {
	o.Messages = v
}

func (o NotificationTransportTest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationTransportTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messages"] = o.Messages
	return toSerialize, nil
}

func (o *NotificationTransportTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationTransportTest := _NotificationTransportTest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationTransportTest)

	if err != nil {
		return err
	}

	*o = NotificationTransportTest(varNotificationTransportTest)

	return err
}

type NullableNotificationTransportTest struct {
	value *NotificationTransportTest
	isSet bool
}

func (v NullableNotificationTransportTest) Get() *NotificationTransportTest {
	return v.value
}

func (v *NullableNotificationTransportTest) Set(val *NotificationTransportTest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTransportTest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTransportTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTransportTest(val *NotificationTransportTest) *NullableNotificationTransportTest {
	return &NullableNotificationTransportTest{value: val, isSet: true}
}

func (v NullableNotificationTransportTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTransportTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
