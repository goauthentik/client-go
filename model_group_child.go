/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// GroupChild Stripped down group serializer to show relevant children for groups
type GroupChild struct {
	Pk   string `json:"pk"`
	Name string `json:"name"`
	// Users added to this group will be superusers.
	IsSuperuser *bool                  `json:"is_superuser,omitempty"`
	Attributes  map[string]interface{} `json:"attributes,omitempty"`
	GroupUuid   string                 `json:"group_uuid"`
}

// NewGroupChild instantiates a new GroupChild object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupChild(pk string, name string, groupUuid string) *GroupChild {
	this := GroupChild{}
	this.Pk = pk
	this.Name = name
	this.GroupUuid = groupUuid
	return &this
}

// NewGroupChildWithDefaults instantiates a new GroupChild object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupChildWithDefaults() *GroupChild {
	this := GroupChild{}
	return &this
}

// GetPk returns the Pk field value
func (o *GroupChild) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *GroupChild) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *GroupChild) SetPk(v string) {
	o.Pk = v
}

// GetName returns the Name field value
func (o *GroupChild) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupChild) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupChild) SetName(v string) {
	o.Name = v
}

// GetIsSuperuser returns the IsSuperuser field value if set, zero value otherwise.
func (o *GroupChild) GetIsSuperuser() bool {
	if o == nil || o.IsSuperuser == nil {
		var ret bool
		return ret
	}
	return *o.IsSuperuser
}

// GetIsSuperuserOk returns a tuple with the IsSuperuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupChild) GetIsSuperuserOk() (*bool, bool) {
	if o == nil || o.IsSuperuser == nil {
		return nil, false
	}
	return o.IsSuperuser, true
}

// HasIsSuperuser returns a boolean if a field has been set.
func (o *GroupChild) HasIsSuperuser() bool {
	if o != nil && o.IsSuperuser != nil {
		return true
	}

	return false
}

// SetIsSuperuser gets a reference to the given bool and assigns it to the IsSuperuser field.
func (o *GroupChild) SetIsSuperuser(v bool) {
	o.IsSuperuser = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *GroupChild) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupChild) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *GroupChild) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *GroupChild) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetGroupUuid returns the GroupUuid field value
func (o *GroupChild) GetGroupUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupUuid
}

// GetGroupUuidOk returns a tuple with the GroupUuid field value
// and a boolean to check if the value has been set.
func (o *GroupChild) GetGroupUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupUuid, true
}

// SetGroupUuid sets field value
func (o *GroupChild) SetGroupUuid(v string) {
	o.GroupUuid = v
}

func (o GroupChild) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.IsSuperuser != nil {
		toSerialize["is_superuser"] = o.IsSuperuser
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["group_uuid"] = o.GroupUuid
	}
	return json.Marshal(toSerialize)
}

type NullableGroupChild struct {
	value *GroupChild
	isSet bool
}

func (v NullableGroupChild) Get() *GroupChild {
	return v.value
}

func (v *NullableGroupChild) Set(val *GroupChild) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupChild) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupChild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupChild(val *GroupChild) *NullableGroupChild {
	return &NullableGroupChild{value: val, isSet: true}
}

func (v NullableGroupChild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupChild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
