/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RACPropertyMappingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RACPropertyMappingRequest{}

// RACPropertyMappingRequest RACPropertyMapping Serializer
type RACPropertyMappingRequest struct {
	// Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
	Managed        NullableString         `json:"managed,omitempty"`
	Name           string                 `json:"name"`
	Expression     *string                `json:"expression,omitempty"`
	StaticSettings map[string]interface{} `json:"static_settings"`
}

type _RACPropertyMappingRequest RACPropertyMappingRequest

// NewRACPropertyMappingRequest instantiates a new RACPropertyMappingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRACPropertyMappingRequest(name string, staticSettings map[string]interface{}) *RACPropertyMappingRequest {
	this := RACPropertyMappingRequest{}
	this.Name = name
	this.StaticSettings = staticSettings
	return &this
}

// NewRACPropertyMappingRequestWithDefaults instantiates a new RACPropertyMappingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRACPropertyMappingRequestWithDefaults() *RACPropertyMappingRequest {
	this := RACPropertyMappingRequest{}
	return &this
}

// GetManaged returns the Managed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RACPropertyMappingRequest) GetManaged() string {
	if o == nil || IsNil(o.Managed.Get()) {
		var ret string
		return ret
	}
	return *o.Managed.Get()
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RACPropertyMappingRequest) GetManagedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Managed.Get(), o.Managed.IsSet()
}

// HasManaged returns a boolean if a field has been set.
func (o *RACPropertyMappingRequest) HasManaged() bool {
	if o != nil && o.Managed.IsSet() {
		return true
	}

	return false
}

// SetManaged gets a reference to the given NullableString and assigns it to the Managed field.
func (o *RACPropertyMappingRequest) SetManaged(v string) {
	o.Managed.Set(&v)
}

// SetManagedNil sets the value for Managed to be an explicit nil
func (o *RACPropertyMappingRequest) SetManagedNil() {
	o.Managed.Set(nil)
}

// UnsetManaged ensures that no value is present for Managed, not even an explicit nil
func (o *RACPropertyMappingRequest) UnsetManaged() {
	o.Managed.Unset()
}

// GetName returns the Name field value
func (o *RACPropertyMappingRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RACPropertyMappingRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RACPropertyMappingRequest) SetName(v string) {
	o.Name = v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *RACPropertyMappingRequest) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RACPropertyMappingRequest) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *RACPropertyMappingRequest) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *RACPropertyMappingRequest) SetExpression(v string) {
	o.Expression = &v
}

// GetStaticSettings returns the StaticSettings field value
func (o *RACPropertyMappingRequest) GetStaticSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StaticSettings
}

// GetStaticSettingsOk returns a tuple with the StaticSettings field value
// and a boolean to check if the value has been set.
func (o *RACPropertyMappingRequest) GetStaticSettingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StaticSettings, true
}

// SetStaticSettings sets field value
func (o *RACPropertyMappingRequest) SetStaticSettings(v map[string]interface{}) {
	o.StaticSettings = v
}

func (o RACPropertyMappingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RACPropertyMappingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Managed.IsSet() {
		toSerialize["managed"] = o.Managed.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	toSerialize["static_settings"] = o.StaticSettings
	return toSerialize, nil
}

func (o *RACPropertyMappingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"static_settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRACPropertyMappingRequest := _RACPropertyMappingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRACPropertyMappingRequest)

	if err != nil {
		return err
	}

	*o = RACPropertyMappingRequest(varRACPropertyMappingRequest)

	return err
}

type NullableRACPropertyMappingRequest struct {
	value *RACPropertyMappingRequest
	isSet bool
}

func (v NullableRACPropertyMappingRequest) Get() *RACPropertyMappingRequest {
	return v.value
}

func (v *NullableRACPropertyMappingRequest) Set(val *RACPropertyMappingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRACPropertyMappingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRACPropertyMappingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRACPropertyMappingRequest(val *RACPropertyMappingRequest) *NullableRACPropertyMappingRequest {
	return &NullableRACPropertyMappingRequest{value: val, isSet: true}
}

func (v NullableRACPropertyMappingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRACPropertyMappingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
