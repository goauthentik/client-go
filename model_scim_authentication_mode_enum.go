/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SCIMAuthenticationModeEnum the model 'SCIMAuthenticationModeEnum'
type SCIMAuthenticationModeEnum string

// List of SCIMAuthenticationModeEnum
const (
	SCIMAUTHENTICATIONMODEENUM_TOKEN SCIMAuthenticationModeEnum = "token"
	SCIMAUTHENTICATIONMODEENUM_OAUTH SCIMAuthenticationModeEnum = "oauth"
)

// All allowed values of SCIMAuthenticationModeEnum enum
var AllowedSCIMAuthenticationModeEnumEnumValues = []SCIMAuthenticationModeEnum{
	"token",
	"oauth",
}

func (v *SCIMAuthenticationModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SCIMAuthenticationModeEnum(value)
	for _, existing := range AllowedSCIMAuthenticationModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SCIMAuthenticationModeEnum", value)
}

// NewSCIMAuthenticationModeEnumFromValue returns a pointer to a valid SCIMAuthenticationModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSCIMAuthenticationModeEnumFromValue(v string) (*SCIMAuthenticationModeEnum, error) {
	ev := SCIMAuthenticationModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SCIMAuthenticationModeEnum: valid values are %v", v, AllowedSCIMAuthenticationModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SCIMAuthenticationModeEnum) IsValid() bool {
	for _, existing := range AllowedSCIMAuthenticationModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SCIMAuthenticationModeEnum value
func (v SCIMAuthenticationModeEnum) Ptr() *SCIMAuthenticationModeEnum {
	return &v
}

type NullableSCIMAuthenticationModeEnum struct {
	value *SCIMAuthenticationModeEnum
	isSet bool
}

func (v NullableSCIMAuthenticationModeEnum) Get() *SCIMAuthenticationModeEnum {
	return v.value
}

func (v *NullableSCIMAuthenticationModeEnum) Set(val *SCIMAuthenticationModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSCIMAuthenticationModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSCIMAuthenticationModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCIMAuthenticationModeEnum(val *SCIMAuthenticationModeEnum) *NullableSCIMAuthenticationModeEnum {
	return &NullableSCIMAuthenticationModeEnum{value: val, isSet: true}
}

func (v NullableSCIMAuthenticationModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCIMAuthenticationModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
