/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// GlobalTaskStatus struct for GlobalTaskStatus
type GlobalTaskStatus struct {
	Queued      int32 `json:"queued"`
	Consumed    int32 `json:"consumed"`
	Preprocess  int32 `json:"preprocess"`
	Running     int32 `json:"running"`
	Postprocess int32 `json:"postprocess"`
	Rejected    int32 `json:"rejected"`
	Done        int32 `json:"done"`
	Info        int32 `json:"info"`
	Warning     int32 `json:"warning"`
	Error       int32 `json:"error"`
}

// NewGlobalTaskStatus instantiates a new GlobalTaskStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalTaskStatus(queued int32, consumed int32, preprocess int32, running int32, postprocess int32, rejected int32, done int32, info int32, warning int32, error_ int32) *GlobalTaskStatus {
	this := GlobalTaskStatus{}
	this.Queued = queued
	this.Consumed = consumed
	this.Preprocess = preprocess
	this.Running = running
	this.Postprocess = postprocess
	this.Rejected = rejected
	this.Done = done
	this.Info = info
	this.Warning = warning
	this.Error = error_
	return &this
}

// NewGlobalTaskStatusWithDefaults instantiates a new GlobalTaskStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalTaskStatusWithDefaults() *GlobalTaskStatus {
	this := GlobalTaskStatus{}
	return &this
}

// GetQueued returns the Queued field value
func (o *GlobalTaskStatus) GetQueued() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetQueuedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Queued, true
}

// SetQueued sets field value
func (o *GlobalTaskStatus) SetQueued(v int32) {
	o.Queued = v
}

// GetConsumed returns the Consumed field value
func (o *GlobalTaskStatus) GetConsumed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Consumed
}

// GetConsumedOk returns a tuple with the Consumed field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetConsumedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consumed, true
}

// SetConsumed sets field value
func (o *GlobalTaskStatus) SetConsumed(v int32) {
	o.Consumed = v
}

// GetPreprocess returns the Preprocess field value
func (o *GlobalTaskStatus) GetPreprocess() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Preprocess
}

// GetPreprocessOk returns a tuple with the Preprocess field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetPreprocessOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preprocess, true
}

// SetPreprocess sets field value
func (o *GlobalTaskStatus) SetPreprocess(v int32) {
	o.Preprocess = v
}

// GetRunning returns the Running field value
func (o *GlobalTaskStatus) GetRunning() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Running
}

// GetRunningOk returns a tuple with the Running field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetRunningOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Running, true
}

// SetRunning sets field value
func (o *GlobalTaskStatus) SetRunning(v int32) {
	o.Running = v
}

// GetPostprocess returns the Postprocess field value
func (o *GlobalTaskStatus) GetPostprocess() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Postprocess
}

// GetPostprocessOk returns a tuple with the Postprocess field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetPostprocessOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Postprocess, true
}

// SetPostprocess sets field value
func (o *GlobalTaskStatus) SetPostprocess(v int32) {
	o.Postprocess = v
}

// GetRejected returns the Rejected field value
func (o *GlobalTaskStatus) GetRejected() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rejected
}

// GetRejectedOk returns a tuple with the Rejected field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetRejectedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rejected, true
}

// SetRejected sets field value
func (o *GlobalTaskStatus) SetRejected(v int32) {
	o.Rejected = v
}

// GetDone returns the Done field value
func (o *GlobalTaskStatus) GetDone() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Done
}

// GetDoneOk returns a tuple with the Done field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetDoneOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Done, true
}

// SetDone sets field value
func (o *GlobalTaskStatus) SetDone(v int32) {
	o.Done = v
}

// GetInfo returns the Info field value
func (o *GlobalTaskStatus) GetInfo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Info
}

// GetInfoOk returns a tuple with the Info field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetInfoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Info, true
}

// SetInfo sets field value
func (o *GlobalTaskStatus) SetInfo(v int32) {
	o.Info = v
}

// GetWarning returns the Warning field value
func (o *GlobalTaskStatus) GetWarning() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Warning
}

// GetWarningOk returns a tuple with the Warning field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetWarningOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warning, true
}

// SetWarning sets field value
func (o *GlobalTaskStatus) SetWarning(v int32) {
	o.Warning = v
}

// GetError returns the Error field value
func (o *GlobalTaskStatus) GetError() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *GlobalTaskStatus) GetErrorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *GlobalTaskStatus) SetError(v int32) {
	o.Error = v
}

func (o GlobalTaskStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["queued"] = o.Queued
	}
	if true {
		toSerialize["consumed"] = o.Consumed
	}
	if true {
		toSerialize["preprocess"] = o.Preprocess
	}
	if true {
		toSerialize["running"] = o.Running
	}
	if true {
		toSerialize["postprocess"] = o.Postprocess
	}
	if true {
		toSerialize["rejected"] = o.Rejected
	}
	if true {
		toSerialize["done"] = o.Done
	}
	if true {
		toSerialize["info"] = o.Info
	}
	if true {
		toSerialize["warning"] = o.Warning
	}
	if true {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalTaskStatus struct {
	value *GlobalTaskStatus
	isSet bool
}

func (v NullableGlobalTaskStatus) Get() *GlobalTaskStatus {
	return v.value
}

func (v *NullableGlobalTaskStatus) Set(val *GlobalTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalTaskStatus(val *GlobalTaskStatus) *NullableGlobalTaskStatus {
	return &NullableGlobalTaskStatus{value: val, isSet: true}
}

func (v NullableGlobalTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
