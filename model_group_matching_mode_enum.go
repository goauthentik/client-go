/*
authentik

Making authentication simple.

API version: 2024.8.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// GroupMatchingModeEnum the model 'GroupMatchingModeEnum'
type GroupMatchingModeEnum string

// List of GroupMatchingModeEnum
const (
	GROUPMATCHINGMODEENUM_IDENTIFIER GroupMatchingModeEnum = "identifier"
	GROUPMATCHINGMODEENUM_NAME_LINK  GroupMatchingModeEnum = "name_link"
	GROUPMATCHINGMODEENUM_NAME_DENY  GroupMatchingModeEnum = "name_deny"
)

// All allowed values of GroupMatchingModeEnum enum
var AllowedGroupMatchingModeEnumEnumValues = []GroupMatchingModeEnum{
	"identifier",
	"name_link",
	"name_deny",
}

func (v *GroupMatchingModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupMatchingModeEnum(value)
	for _, existing := range AllowedGroupMatchingModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupMatchingModeEnum", value)
}

// NewGroupMatchingModeEnumFromValue returns a pointer to a valid GroupMatchingModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupMatchingModeEnumFromValue(v string) (*GroupMatchingModeEnum, error) {
	ev := GroupMatchingModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupMatchingModeEnum: valid values are %v", v, AllowedGroupMatchingModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupMatchingModeEnum) IsValid() bool {
	for _, existing := range AllowedGroupMatchingModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupMatchingModeEnum value
func (v GroupMatchingModeEnum) Ptr() *GroupMatchingModeEnum {
	return &v
}

type NullableGroupMatchingModeEnum struct {
	value *GroupMatchingModeEnum
	isSet bool
}

func (v NullableGroupMatchingModeEnum) Get() *GroupMatchingModeEnum {
	return v.value
}

func (v *NullableGroupMatchingModeEnum) Set(val *GroupMatchingModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMatchingModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMatchingModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMatchingModeEnum(val *GroupMatchingModeEnum) *NullableGroupMatchingModeEnum {
	return &NullableGroupMatchingModeEnum{value: val, isSet: true}
}

func (v NullableGroupMatchingModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMatchingModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
