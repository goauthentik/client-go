/*
authentik

Making authentication simple.

API version: 2025.6.4
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// Task struct for Task
type Task struct {
	MessageId *string `json:"message_id,omitempty"`
	// Queue name
	QueueName *string `json:"queue_name,omitempty"`
	// Dramatiq actor name
	ActorName string `json:"actor_name"`
	// Task status
	State *StateEnum `json:"state,omitempty"`
	// Task last modified time
	Mtime            *time.Time               `json:"mtime,omitempty"`
	RelObjAppLabel   string                   `json:"rel_obj_app_label"`
	RelObjModel      string                   `json:"rel_obj_model"`
	RelObjId         NullableString           `json:"rel_obj_id,omitempty"`
	Uid              string                   `json:"uid"`
	Messages         []LogEvent               `json:"messages"`
	PreviousMessages []LogEvent               `json:"previous_messages"`
	AggregatedStatus TaskAggregatedStatusEnum `json:"aggregated_status"`
	Description      NullableString           `json:"description"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(actorName string, relObjAppLabel string, relObjModel string, uid string, messages []LogEvent, previousMessages []LogEvent, aggregatedStatus TaskAggregatedStatusEnum, description NullableString) *Task {
	this := Task{}
	this.ActorName = actorName
	this.RelObjAppLabel = relObjAppLabel
	this.RelObjModel = relObjModel
	this.Uid = uid
	this.Messages = messages
	this.PreviousMessages = previousMessages
	this.AggregatedStatus = aggregatedStatus
	this.Description = description
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *Task) GetMessageId() string {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMessageIdOk() (*string, bool) {
	if o == nil || o.MessageId == nil {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *Task) HasMessageId() bool {
	if o != nil && o.MessageId != nil {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *Task) SetMessageId(v string) {
	o.MessageId = &v
}

// GetQueueName returns the QueueName field value if set, zero value otherwise.
func (o *Task) GetQueueName() string {
	if o == nil || o.QueueName == nil {
		var ret string
		return ret
	}
	return *o.QueueName
}

// GetQueueNameOk returns a tuple with the QueueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetQueueNameOk() (*string, bool) {
	if o == nil || o.QueueName == nil {
		return nil, false
	}
	return o.QueueName, true
}

// HasQueueName returns a boolean if a field has been set.
func (o *Task) HasQueueName() bool {
	if o != nil && o.QueueName != nil {
		return true
	}

	return false
}

// SetQueueName gets a reference to the given string and assigns it to the QueueName field.
func (o *Task) SetQueueName(v string) {
	o.QueueName = &v
}

// GetActorName returns the ActorName field value
func (o *Task) GetActorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActorName
}

// GetActorNameOk returns a tuple with the ActorName field value
// and a boolean to check if the value has been set.
func (o *Task) GetActorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActorName, true
}

// SetActorName sets field value
func (o *Task) SetActorName(v string) {
	o.ActorName = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Task) GetState() StateEnum {
	if o == nil || o.State == nil {
		var ret StateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStateOk() (*StateEnum, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Task) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given StateEnum and assigns it to the State field.
func (o *Task) SetState(v StateEnum) {
	o.State = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *Task) GetMtime() time.Time {
	if o == nil || o.Mtime == nil {
		var ret time.Time
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMtimeOk() (*time.Time, bool) {
	if o == nil || o.Mtime == nil {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *Task) HasMtime() bool {
	if o != nil && o.Mtime != nil {
		return true
	}

	return false
}

// SetMtime gets a reference to the given time.Time and assigns it to the Mtime field.
func (o *Task) SetMtime(v time.Time) {
	o.Mtime = &v
}

// GetRelObjAppLabel returns the RelObjAppLabel field value
func (o *Task) GetRelObjAppLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelObjAppLabel
}

// GetRelObjAppLabelOk returns a tuple with the RelObjAppLabel field value
// and a boolean to check if the value has been set.
func (o *Task) GetRelObjAppLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelObjAppLabel, true
}

// SetRelObjAppLabel sets field value
func (o *Task) SetRelObjAppLabel(v string) {
	o.RelObjAppLabel = v
}

// GetRelObjModel returns the RelObjModel field value
func (o *Task) GetRelObjModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelObjModel
}

// GetRelObjModelOk returns a tuple with the RelObjModel field value
// and a boolean to check if the value has been set.
func (o *Task) GetRelObjModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelObjModel, true
}

// SetRelObjModel sets field value
func (o *Task) SetRelObjModel(v string) {
	o.RelObjModel = v
}

// GetRelObjId returns the RelObjId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetRelObjId() string {
	if o == nil || o.RelObjId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RelObjId.Get()
}

// GetRelObjIdOk returns a tuple with the RelObjId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetRelObjIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelObjId.Get(), o.RelObjId.IsSet()
}

// HasRelObjId returns a boolean if a field has been set.
func (o *Task) HasRelObjId() bool {
	if o != nil && o.RelObjId.IsSet() {
		return true
	}

	return false
}

// SetRelObjId gets a reference to the given NullableString and assigns it to the RelObjId field.
func (o *Task) SetRelObjId(v string) {
	o.RelObjId.Set(&v)
}

// SetRelObjIdNil sets the value for RelObjId to be an explicit nil
func (o *Task) SetRelObjIdNil() {
	o.RelObjId.Set(nil)
}

// UnsetRelObjId ensures that no value is present for RelObjId, not even an explicit nil
func (o *Task) UnsetRelObjId() {
	o.RelObjId.Unset()
}

// GetUid returns the Uid field value
func (o *Task) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Task) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Task) SetUid(v string) {
	o.Uid = v
}

// GetMessages returns the Messages field value
func (o *Task) GetMessages() []LogEvent {
	if o == nil {
		var ret []LogEvent
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *Task) GetMessagesOk() ([]LogEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *Task) SetMessages(v []LogEvent) {
	o.Messages = v
}

// GetPreviousMessages returns the PreviousMessages field value
func (o *Task) GetPreviousMessages() []LogEvent {
	if o == nil {
		var ret []LogEvent
		return ret
	}

	return o.PreviousMessages
}

// GetPreviousMessagesOk returns a tuple with the PreviousMessages field value
// and a boolean to check if the value has been set.
func (o *Task) GetPreviousMessagesOk() ([]LogEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousMessages, true
}

// SetPreviousMessages sets field value
func (o *Task) SetPreviousMessages(v []LogEvent) {
	o.PreviousMessages = v
}

// GetAggregatedStatus returns the AggregatedStatus field value
func (o *Task) GetAggregatedStatus() TaskAggregatedStatusEnum {
	if o == nil {
		var ret TaskAggregatedStatusEnum
		return ret
	}

	return o.AggregatedStatus
}

// GetAggregatedStatusOk returns a tuple with the AggregatedStatus field value
// and a boolean to check if the value has been set.
func (o *Task) GetAggregatedStatusOk() (*TaskAggregatedStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregatedStatus, true
}

// SetAggregatedStatus sets field value
func (o *Task) SetAggregatedStatus(v TaskAggregatedStatusEnum) {
	o.AggregatedStatus = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Task) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Task) SetDescription(v string) {
	o.Description.Set(&v)
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MessageId != nil {
		toSerialize["message_id"] = o.MessageId
	}
	if o.QueueName != nil {
		toSerialize["queue_name"] = o.QueueName
	}
	if true {
		toSerialize["actor_name"] = o.ActorName
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Mtime != nil {
		toSerialize["mtime"] = o.Mtime
	}
	if true {
		toSerialize["rel_obj_app_label"] = o.RelObjAppLabel
	}
	if true {
		toSerialize["rel_obj_model"] = o.RelObjModel
	}
	if o.RelObjId.IsSet() {
		toSerialize["rel_obj_id"] = o.RelObjId.Get()
	}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["messages"] = o.Messages
	}
	if true {
		toSerialize["previous_messages"] = o.PreviousMessages
	}
	if true {
		toSerialize["aggregated_status"] = o.AggregatedStatus
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
