/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Workers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workers{}

// Workers struct for Workers
type Workers struct {
	Count int32 `json:"count"`
}

type _Workers Workers

// NewWorkers instantiates a new Workers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkers(count int32) *Workers {
	this := Workers{}
	this.Count = count
	return &this
}

// NewWorkersWithDefaults instantiates a new Workers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkersWithDefaults() *Workers {
	this := Workers{}
	return &this
}

// GetCount returns the Count field value
func (o *Workers) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Workers) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Workers) SetCount(v int32) {
	o.Count = v
}

func (o Workers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *Workers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkers := _Workers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkers)

	if err != nil {
		return err
	}

	*o = Workers(varWorkers)

	return err
}

type NullableWorkers struct {
	value *Workers
	isSet bool
}

func (v NullableWorkers) Get() *Workers {
	return v.value
}

func (v *NullableWorkers) Set(val *Workers) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkers) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkers(val *Workers) *NullableWorkers {
	return &NullableWorkers{value: val, isSet: true}
}

func (v NullableWorkers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
