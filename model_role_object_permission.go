/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoleObjectPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleObjectPermission{}

// RoleObjectPermission Role-bound object level permission
type RoleObjectPermission struct {
	Id       int32  `json:"id"`
	Codename string `json:"codename"`
	Model    string `json:"model"`
	AppLabel string `json:"app_label"`
	ObjectPk string `json:"object_pk"`
	Name     string `json:"name"`
}

type _RoleObjectPermission RoleObjectPermission

// NewRoleObjectPermission instantiates a new RoleObjectPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleObjectPermission(id int32, codename string, model string, appLabel string, objectPk string, name string) *RoleObjectPermission {
	this := RoleObjectPermission{}
	this.Id = id
	this.Codename = codename
	this.Model = model
	this.AppLabel = appLabel
	this.ObjectPk = objectPk
	this.Name = name
	return &this
}

// NewRoleObjectPermissionWithDefaults instantiates a new RoleObjectPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleObjectPermissionWithDefaults() *RoleObjectPermission {
	this := RoleObjectPermission{}
	return &this
}

// GetId returns the Id field value
func (o *RoleObjectPermission) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoleObjectPermission) SetId(v int32) {
	o.Id = v
}

// GetCodename returns the Codename field value
func (o *RoleObjectPermission) GetCodename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Codename
}

// GetCodenameOk returns a tuple with the Codename field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetCodenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Codename, true
}

// SetCodename sets field value
func (o *RoleObjectPermission) SetCodename(v string) {
	o.Codename = v
}

// GetModel returns the Model field value
func (o *RoleObjectPermission) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *RoleObjectPermission) SetModel(v string) {
	o.Model = v
}

// GetAppLabel returns the AppLabel field value
func (o *RoleObjectPermission) GetAppLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppLabel
}

// GetAppLabelOk returns a tuple with the AppLabel field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetAppLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppLabel, true
}

// SetAppLabel sets field value
func (o *RoleObjectPermission) SetAppLabel(v string) {
	o.AppLabel = v
}

// GetObjectPk returns the ObjectPk field value
func (o *RoleObjectPermission) GetObjectPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectPk
}

// GetObjectPkOk returns a tuple with the ObjectPk field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetObjectPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectPk, true
}

// SetObjectPk sets field value
func (o *RoleObjectPermission) SetObjectPk(v string) {
	o.ObjectPk = v
}

// GetName returns the Name field value
func (o *RoleObjectPermission) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleObjectPermission) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleObjectPermission) SetName(v string) {
	o.Name = v
}

func (o RoleObjectPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleObjectPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["codename"] = o.Codename
	toSerialize["model"] = o.Model
	toSerialize["app_label"] = o.AppLabel
	toSerialize["object_pk"] = o.ObjectPk
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *RoleObjectPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"codename",
		"model",
		"app_label",
		"object_pk",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleObjectPermission := _RoleObjectPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleObjectPermission)

	if err != nil {
		return err
	}

	*o = RoleObjectPermission(varRoleObjectPermission)

	return err
}

type NullableRoleObjectPermission struct {
	value *RoleObjectPermission
	isSet bool
}

func (v NullableRoleObjectPermission) Get() *RoleObjectPermission {
	return v.value
}

func (v *NullableRoleObjectPermission) Set(val *RoleObjectPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleObjectPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleObjectPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleObjectPermission(val *RoleObjectPermission) *NullableRoleObjectPermission {
	return &NullableRoleObjectPermission{value: val, isSet: true}
}

func (v NullableRoleObjectPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleObjectPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
