/*
authentik

Making authentication simple.

API version: 2025.2.3
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// MatchingModeEnum the model 'MatchingModeEnum'
type MatchingModeEnum string

// List of MatchingModeEnum
const (
	MATCHINGMODEENUM_STRICT MatchingModeEnum = "strict"
	MATCHINGMODEENUM_REGEX  MatchingModeEnum = "regex"
)

// All allowed values of MatchingModeEnum enum
var AllowedMatchingModeEnumEnumValues = []MatchingModeEnum{
	"strict",
	"regex",
}

func (v *MatchingModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatchingModeEnum(value)
	for _, existing := range AllowedMatchingModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatchingModeEnum", value)
}

// NewMatchingModeEnumFromValue returns a pointer to a valid MatchingModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchingModeEnumFromValue(v string) (*MatchingModeEnum, error) {
	ev := MatchingModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatchingModeEnum: valid values are %v", v, AllowedMatchingModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchingModeEnum) IsValid() bool {
	for _, existing := range AllowedMatchingModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatchingModeEnum value
func (v MatchingModeEnum) Ptr() *MatchingModeEnum {
	return &v
}

type NullableMatchingModeEnum struct {
	value *MatchingModeEnum
	isSet bool
}

func (v NullableMatchingModeEnum) Get() *MatchingModeEnum {
	return v.value
}

func (v *NullableMatchingModeEnum) Set(val *MatchingModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingModeEnum(val *MatchingModeEnum) *NullableMatchingModeEnum {
	return &NullableMatchingModeEnum{value: val, isSet: true}
}

func (v NullableMatchingModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
