/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// IframeLogoutChallenge Challenge for iframe logout
type IframeLogoutChallenge struct {
	FlowInfo       *ContextualFlowInfo       `json:"flow_info,omitempty"`
	Component      *string                   `json:"component,omitempty"`
	ResponseErrors *map[string][]ErrorDetail `json:"response_errors,omitempty"`
	LogoutUrls     []map[string]interface{}  `json:"logout_urls,omitempty"`
}

// NewIframeLogoutChallenge instantiates a new IframeLogoutChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIframeLogoutChallenge() *IframeLogoutChallenge {
	this := IframeLogoutChallenge{}
	var component string = "ak-provider-iframe-logout"
	this.Component = &component
	return &this
}

// NewIframeLogoutChallengeWithDefaults instantiates a new IframeLogoutChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIframeLogoutChallengeWithDefaults() *IframeLogoutChallenge {
	this := IframeLogoutChallenge{}
	var component string = "ak-provider-iframe-logout"
	this.Component = &component
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *IframeLogoutChallenge) GetFlowInfo() ContextualFlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret ContextualFlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IframeLogoutChallenge) GetFlowInfoOk() (*ContextualFlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *IframeLogoutChallenge) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given ContextualFlowInfo and assigns it to the FlowInfo field.
func (o *IframeLogoutChallenge) SetFlowInfo(v ContextualFlowInfo) {
	o.FlowInfo = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *IframeLogoutChallenge) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IframeLogoutChallenge) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *IframeLogoutChallenge) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *IframeLogoutChallenge) SetComponent(v string) {
	o.Component = &v
}

// GetResponseErrors returns the ResponseErrors field value if set, zero value otherwise.
func (o *IframeLogoutChallenge) GetResponseErrors() map[string][]ErrorDetail {
	if o == nil || o.ResponseErrors == nil {
		var ret map[string][]ErrorDetail
		return ret
	}
	return *o.ResponseErrors
}

// GetResponseErrorsOk returns a tuple with the ResponseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IframeLogoutChallenge) GetResponseErrorsOk() (*map[string][]ErrorDetail, bool) {
	if o == nil || o.ResponseErrors == nil {
		return nil, false
	}
	return o.ResponseErrors, true
}

// HasResponseErrors returns a boolean if a field has been set.
func (o *IframeLogoutChallenge) HasResponseErrors() bool {
	if o != nil && o.ResponseErrors != nil {
		return true
	}

	return false
}

// SetResponseErrors gets a reference to the given map[string][]ErrorDetail and assigns it to the ResponseErrors field.
func (o *IframeLogoutChallenge) SetResponseErrors(v map[string][]ErrorDetail) {
	o.ResponseErrors = &v
}

// GetLogoutUrls returns the LogoutUrls field value if set, zero value otherwise.
func (o *IframeLogoutChallenge) GetLogoutUrls() []map[string]interface{} {
	if o == nil || o.LogoutUrls == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.LogoutUrls
}

// GetLogoutUrlsOk returns a tuple with the LogoutUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IframeLogoutChallenge) GetLogoutUrlsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.LogoutUrls == nil {
		return nil, false
	}
	return o.LogoutUrls, true
}

// HasLogoutUrls returns a boolean if a field has been set.
func (o *IframeLogoutChallenge) HasLogoutUrls() bool {
	if o != nil && o.LogoutUrls != nil {
		return true
	}

	return false
}

// SetLogoutUrls gets a reference to the given []map[string]interface{} and assigns it to the LogoutUrls field.
func (o *IframeLogoutChallenge) SetLogoutUrls(v []map[string]interface{}) {
	o.LogoutUrls = v
}

func (o IframeLogoutChallenge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowInfo != nil {
		toSerialize["flow_info"] = o.FlowInfo
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.ResponseErrors != nil {
		toSerialize["response_errors"] = o.ResponseErrors
	}
	if o.LogoutUrls != nil {
		toSerialize["logout_urls"] = o.LogoutUrls
	}
	return json.Marshal(toSerialize)
}

type NullableIframeLogoutChallenge struct {
	value *IframeLogoutChallenge
	isSet bool
}

func (v NullableIframeLogoutChallenge) Get() *IframeLogoutChallenge {
	return v.value
}

func (v *NullableIframeLogoutChallenge) Set(val *IframeLogoutChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableIframeLogoutChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableIframeLogoutChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIframeLogoutChallenge(val *IframeLogoutChallenge) *NullableIframeLogoutChallenge {
	return &NullableIframeLogoutChallenge{value: val, isSet: true}
}

func (v NullableIframeLogoutChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIframeLogoutChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
