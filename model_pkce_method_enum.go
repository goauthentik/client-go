/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PKCEMethodEnum the model 'PKCEMethodEnum'
type PKCEMethodEnum string

// List of PKCEMethodEnum
const (
	PKCEMETHODENUM_NONE  PKCEMethodEnum = "none"
	PKCEMETHODENUM_PLAIN PKCEMethodEnum = "plain"
	PKCEMETHODENUM_S256  PKCEMethodEnum = "S256"
)

// All allowed values of PKCEMethodEnum enum
var AllowedPKCEMethodEnumEnumValues = []PKCEMethodEnum{
	"none",
	"plain",
	"S256",
}

func (v *PKCEMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PKCEMethodEnum(value)
	for _, existing := range AllowedPKCEMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PKCEMethodEnum", value)
}

// NewPKCEMethodEnumFromValue returns a pointer to a valid PKCEMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPKCEMethodEnumFromValue(v string) (*PKCEMethodEnum, error) {
	ev := PKCEMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PKCEMethodEnum: valid values are %v", v, AllowedPKCEMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PKCEMethodEnum) IsValid() bool {
	for _, existing := range AllowedPKCEMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PKCEMethodEnum value
func (v PKCEMethodEnum) Ptr() *PKCEMethodEnum {
	return &v
}

type NullablePKCEMethodEnum struct {
	value *PKCEMethodEnum
	isSet bool
}

func (v NullablePKCEMethodEnum) Get() *PKCEMethodEnum {
	return v.value
}

func (v *NullablePKCEMethodEnum) Set(val *PKCEMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePKCEMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePKCEMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePKCEMethodEnum(val *PKCEMethodEnum) *NullablePKCEMethodEnum {
	return &NullablePKCEMethodEnum{value: val, isSet: true}
}

func (v NullablePKCEMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePKCEMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
