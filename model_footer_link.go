/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FooterLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FooterLink{}

// FooterLink Links returned in Config API
type FooterLink struct {
	Href NullableString `json:"href"`
	Name string         `json:"name"`
}

type _FooterLink FooterLink

// NewFooterLink instantiates a new FooterLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFooterLink(href NullableString, name string) *FooterLink {
	this := FooterLink{}
	this.Href = href
	this.Name = name
	return &this
}

// NewFooterLinkWithDefaults instantiates a new FooterLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFooterLinkWithDefaults() *FooterLink {
	this := FooterLink{}
	return &this
}

// GetHref returns the Href field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FooterLink) GetHref() string {
	if o == nil || o.Href.Get() == nil {
		var ret string
		return ret
	}

	return *o.Href.Get()
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FooterLink) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Href.Get(), o.Href.IsSet()
}

// SetHref sets field value
func (o *FooterLink) SetHref(v string) {
	o.Href.Set(&v)
}

// GetName returns the Name field value
func (o *FooterLink) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FooterLink) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FooterLink) SetName(v string) {
	o.Name = v
}

func (o FooterLink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FooterLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href.Get()
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *FooterLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFooterLink := _FooterLink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFooterLink)

	if err != nil {
		return err
	}

	*o = FooterLink(varFooterLink)

	return err
}

type NullableFooterLink struct {
	value *FooterLink
	isSet bool
}

func (v NullableFooterLink) Get() *FooterLink {
	return v.value
}

func (v *NullableFooterLink) Set(val *FooterLink) {
	v.value = val
	v.isSet = true
}

func (v NullableFooterLink) IsSet() bool {
	return v.isSet
}

func (v *NullableFooterLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFooterLink(val *FooterLink) *NullableFooterLink {
	return &NullableFooterLink{value: val, isSet: true}
}

func (v NullableFooterLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFooterLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
