/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConnectionTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionTokenRequest{}

// ConnectionTokenRequest ConnectionToken Serializer
type ConnectionTokenRequest struct {
	Pk       *string `json:"pk,omitempty"`
	Provider int32   `json:"provider"`
	Endpoint string  `json:"endpoint"`
}

type _ConnectionTokenRequest ConnectionTokenRequest

// NewConnectionTokenRequest instantiates a new ConnectionTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionTokenRequest(provider int32, endpoint string) *ConnectionTokenRequest {
	this := ConnectionTokenRequest{}
	this.Provider = provider
	this.Endpoint = endpoint
	return &this
}

// NewConnectionTokenRequestWithDefaults instantiates a new ConnectionTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionTokenRequestWithDefaults() *ConnectionTokenRequest {
	this := ConnectionTokenRequest{}
	return &this
}

// GetPk returns the Pk field value if set, zero value otherwise.
func (o *ConnectionTokenRequest) GetPk() string {
	if o == nil || IsNil(o.Pk) {
		var ret string
		return ret
	}
	return *o.Pk
}

// GetPkOk returns a tuple with the Pk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionTokenRequest) GetPkOk() (*string, bool) {
	if o == nil || IsNil(o.Pk) {
		return nil, false
	}
	return o.Pk, true
}

// HasPk returns a boolean if a field has been set.
func (o *ConnectionTokenRequest) HasPk() bool {
	if o != nil && !IsNil(o.Pk) {
		return true
	}

	return false
}

// SetPk gets a reference to the given string and assigns it to the Pk field.
func (o *ConnectionTokenRequest) SetPk(v string) {
	o.Pk = &v
}

// GetProvider returns the Provider field value
func (o *ConnectionTokenRequest) GetProvider() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ConnectionTokenRequest) GetProviderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ConnectionTokenRequest) SetProvider(v int32) {
	o.Provider = v
}

// GetEndpoint returns the Endpoint field value
func (o *ConnectionTokenRequest) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *ConnectionTokenRequest) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *ConnectionTokenRequest) SetEndpoint(v string) {
	o.Endpoint = v
}

func (o ConnectionTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pk) {
		toSerialize["pk"] = o.Pk
	}
	toSerialize["provider"] = o.Provider
	toSerialize["endpoint"] = o.Endpoint
	return toSerialize, nil
}

func (o *ConnectionTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionTokenRequest := _ConnectionTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionTokenRequest)

	if err != nil {
		return err
	}

	*o = ConnectionTokenRequest(varConnectionTokenRequest)

	return err
}

type NullableConnectionTokenRequest struct {
	value *ConnectionTokenRequest
	isSet bool
}

func (v NullableConnectionTokenRequest) Get() *ConnectionTokenRequest {
	return v.value
}

func (v *NullableConnectionTokenRequest) Set(val *ConnectionTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionTokenRequest(val *ConnectionTokenRequest) *NullableConnectionTokenRequest {
	return &NullableConnectionTokenRequest{value: val, isSet: true}
}

func (v NullableConnectionTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
