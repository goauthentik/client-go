/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserKerberosSourceConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserKerberosSourceConnectionRequest{}

// UserKerberosSourceConnectionRequest Kerberos Source Serializer
type UserKerberosSourceConnectionRequest struct {
	User       int32  `json:"user"`
	Identifier string `json:"identifier"`
}

type _UserKerberosSourceConnectionRequest UserKerberosSourceConnectionRequest

// NewUserKerberosSourceConnectionRequest instantiates a new UserKerberosSourceConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserKerberosSourceConnectionRequest(user int32, identifier string) *UserKerberosSourceConnectionRequest {
	this := UserKerberosSourceConnectionRequest{}
	this.User = user
	this.Identifier = identifier
	return &this
}

// NewUserKerberosSourceConnectionRequestWithDefaults instantiates a new UserKerberosSourceConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserKerberosSourceConnectionRequestWithDefaults() *UserKerberosSourceConnectionRequest {
	this := UserKerberosSourceConnectionRequest{}
	return &this
}

// GetUser returns the User field value
func (o *UserKerberosSourceConnectionRequest) GetUser() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserKerberosSourceConnectionRequest) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserKerberosSourceConnectionRequest) SetUser(v int32) {
	o.User = v
}

// GetIdentifier returns the Identifier field value
func (o *UserKerberosSourceConnectionRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *UserKerberosSourceConnectionRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *UserKerberosSourceConnectionRequest) SetIdentifier(v string) {
	o.Identifier = v
}

func (o UserKerberosSourceConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserKerberosSourceConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["identifier"] = o.Identifier
	return toSerialize, nil
}

func (o *UserKerberosSourceConnectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"identifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserKerberosSourceConnectionRequest := _UserKerberosSourceConnectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserKerberosSourceConnectionRequest)

	if err != nil {
		return err
	}

	*o = UserKerberosSourceConnectionRequest(varUserKerberosSourceConnectionRequest)

	return err
}

type NullableUserKerberosSourceConnectionRequest struct {
	value *UserKerberosSourceConnectionRequest
	isSet bool
}

func (v NullableUserKerberosSourceConnectionRequest) Get() *UserKerberosSourceConnectionRequest {
	return v.value
}

func (v *NullableUserKerberosSourceConnectionRequest) Set(val *UserKerberosSourceConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserKerberosSourceConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserKerberosSourceConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserKerberosSourceConnectionRequest(val *UserKerberosSourceConnectionRequest) *NullableUserKerberosSourceConnectionRequest {
	return &NullableUserKerberosSourceConnectionRequest{value: val, isSet: true}
}

func (v NullableUserKerberosSourceConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserKerberosSourceConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
