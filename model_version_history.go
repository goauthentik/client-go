/*
authentik

Making authentication simple.

API version: 2025.6.3
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// VersionHistory VersionHistory Serializer
type VersionHistory struct {
	Id        int32     `json:"id"`
	Timestamp time.Time `json:"timestamp"`
	Version   string    `json:"version"`
	Build     string    `json:"build"`
}

// NewVersionHistory instantiates a new VersionHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionHistory(id int32, timestamp time.Time, version string, build string) *VersionHistory {
	this := VersionHistory{}
	this.Id = id
	this.Timestamp = timestamp
	this.Version = version
	this.Build = build
	return &this
}

// NewVersionHistoryWithDefaults instantiates a new VersionHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionHistoryWithDefaults() *VersionHistory {
	this := VersionHistory{}
	return &this
}

// GetId returns the Id field value
func (o *VersionHistory) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VersionHistory) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VersionHistory) SetId(v int32) {
	o.Id = v
}

// GetTimestamp returns the Timestamp field value
func (o *VersionHistory) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *VersionHistory) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *VersionHistory) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetVersion returns the Version field value
func (o *VersionHistory) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VersionHistory) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VersionHistory) SetVersion(v string) {
	o.Version = v
}

// GetBuild returns the Build field value
func (o *VersionHistory) GetBuild() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Build
}

// GetBuildOk returns a tuple with the Build field value
// and a boolean to check if the value has been set.
func (o *VersionHistory) GetBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Build, true
}

// SetBuild sets field value
func (o *VersionHistory) SetBuild(v string) {
	o.Build = v
}

func (o VersionHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["build"] = o.Build
	}
	return json.Marshal(toSerialize)
}

type NullableVersionHistory struct {
	value *VersionHistory
	isSet bool
}

func (v NullableVersionHistory) Get() *VersionHistory {
	return v.value
}

func (v *NullableVersionHistory) Set(val *VersionHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionHistory(val *VersionHistory) *NullableVersionHistory {
	return &NullableVersionHistory{value: val, isSet: true}
}

func (v NullableVersionHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
