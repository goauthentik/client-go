/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IdentificationChallenge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentificationChallenge{}

// IdentificationChallenge Identification challenges with all UI elements
type IdentificationChallenge struct {
	FlowInfo          *ContextualFlowInfo       `json:"flow_info,omitempty"`
	Component         *string                   `json:"component,omitempty"`
	ResponseErrors    *map[string][]ErrorDetail `json:"response_errors,omitempty"`
	UserFields        []string                  `json:"user_fields"`
	PasswordFields    bool                      `json:"password_fields"`
	AllowShowPassword *bool                     `json:"allow_show_password,omitempty"`
	ApplicationPre    *string                   `json:"application_pre,omitempty"`
	FlowDesignation   FlowDesignationEnum       `json:"flow_designation"`
	CaptchaStage      *CaptchaChallenge         `json:"captcha_stage,omitempty"`
	EnrollUrl         *string                   `json:"enroll_url,omitempty"`
	RecoveryUrl       *string                   `json:"recovery_url,omitempty"`
	PasswordlessUrl   *string                   `json:"passwordless_url,omitempty"`
	PrimaryAction     string                    `json:"primary_action"`
	Sources           []LoginSource             `json:"sources,omitempty"`
	ShowSourceLabels  bool                      `json:"show_source_labels"`
}

type _IdentificationChallenge IdentificationChallenge

// NewIdentificationChallenge instantiates a new IdentificationChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentificationChallenge(userFields []string, passwordFields bool, flowDesignation FlowDesignationEnum, primaryAction string, showSourceLabels bool) *IdentificationChallenge {
	this := IdentificationChallenge{}
	var component string = "ak-stage-identification"
	this.Component = &component
	this.UserFields = userFields
	this.PasswordFields = passwordFields
	var allowShowPassword bool = false
	this.AllowShowPassword = &allowShowPassword
	this.FlowDesignation = flowDesignation
	this.PrimaryAction = primaryAction
	this.ShowSourceLabels = showSourceLabels
	return &this
}

// NewIdentificationChallengeWithDefaults instantiates a new IdentificationChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentificationChallengeWithDefaults() *IdentificationChallenge {
	this := IdentificationChallenge{}
	var component string = "ak-stage-identification"
	this.Component = &component
	var allowShowPassword bool = false
	this.AllowShowPassword = &allowShowPassword
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetFlowInfo() ContextualFlowInfo {
	if o == nil || IsNil(o.FlowInfo) {
		var ret ContextualFlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetFlowInfoOk() (*ContextualFlowInfo, bool) {
	if o == nil || IsNil(o.FlowInfo) {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasFlowInfo() bool {
	if o != nil && !IsNil(o.FlowInfo) {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given ContextualFlowInfo and assigns it to the FlowInfo field.
func (o *IdentificationChallenge) SetFlowInfo(v ContextualFlowInfo) {
	o.FlowInfo = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *IdentificationChallenge) SetComponent(v string) {
	o.Component = &v
}

// GetResponseErrors returns the ResponseErrors field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetResponseErrors() map[string][]ErrorDetail {
	if o == nil || IsNil(o.ResponseErrors) {
		var ret map[string][]ErrorDetail
		return ret
	}
	return *o.ResponseErrors
}

// GetResponseErrorsOk returns a tuple with the ResponseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetResponseErrorsOk() (*map[string][]ErrorDetail, bool) {
	if o == nil || IsNil(o.ResponseErrors) {
		return nil, false
	}
	return o.ResponseErrors, true
}

// HasResponseErrors returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasResponseErrors() bool {
	if o != nil && !IsNil(o.ResponseErrors) {
		return true
	}

	return false
}

// SetResponseErrors gets a reference to the given map[string][]ErrorDetail and assigns it to the ResponseErrors field.
func (o *IdentificationChallenge) SetResponseErrors(v map[string][]ErrorDetail) {
	o.ResponseErrors = &v
}

// GetUserFields returns the UserFields field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *IdentificationChallenge) GetUserFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserFields
}

// GetUserFieldsOk returns a tuple with the UserFields field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentificationChallenge) GetUserFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserFields) {
		return nil, false
	}
	return o.UserFields, true
}

// SetUserFields sets field value
func (o *IdentificationChallenge) SetUserFields(v []string) {
	o.UserFields = v
}

// GetPasswordFields returns the PasswordFields field value
func (o *IdentificationChallenge) GetPasswordFields() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PasswordFields
}

// GetPasswordFieldsOk returns a tuple with the PasswordFields field value
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetPasswordFieldsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordFields, true
}

// SetPasswordFields sets field value
func (o *IdentificationChallenge) SetPasswordFields(v bool) {
	o.PasswordFields = v
}

// GetAllowShowPassword returns the AllowShowPassword field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetAllowShowPassword() bool {
	if o == nil || IsNil(o.AllowShowPassword) {
		var ret bool
		return ret
	}
	return *o.AllowShowPassword
}

// GetAllowShowPasswordOk returns a tuple with the AllowShowPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetAllowShowPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowShowPassword) {
		return nil, false
	}
	return o.AllowShowPassword, true
}

// HasAllowShowPassword returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasAllowShowPassword() bool {
	if o != nil && !IsNil(o.AllowShowPassword) {
		return true
	}

	return false
}

// SetAllowShowPassword gets a reference to the given bool and assigns it to the AllowShowPassword field.
func (o *IdentificationChallenge) SetAllowShowPassword(v bool) {
	o.AllowShowPassword = &v
}

// GetApplicationPre returns the ApplicationPre field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetApplicationPre() string {
	if o == nil || IsNil(o.ApplicationPre) {
		var ret string
		return ret
	}
	return *o.ApplicationPre
}

// GetApplicationPreOk returns a tuple with the ApplicationPre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetApplicationPreOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationPre) {
		return nil, false
	}
	return o.ApplicationPre, true
}

// HasApplicationPre returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasApplicationPre() bool {
	if o != nil && !IsNil(o.ApplicationPre) {
		return true
	}

	return false
}

// SetApplicationPre gets a reference to the given string and assigns it to the ApplicationPre field.
func (o *IdentificationChallenge) SetApplicationPre(v string) {
	o.ApplicationPre = &v
}

// GetFlowDesignation returns the FlowDesignation field value
func (o *IdentificationChallenge) GetFlowDesignation() FlowDesignationEnum {
	if o == nil {
		var ret FlowDesignationEnum
		return ret
	}

	return o.FlowDesignation
}

// GetFlowDesignationOk returns a tuple with the FlowDesignation field value
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetFlowDesignationOk() (*FlowDesignationEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowDesignation, true
}

// SetFlowDesignation sets field value
func (o *IdentificationChallenge) SetFlowDesignation(v FlowDesignationEnum) {
	o.FlowDesignation = v
}

// GetCaptchaStage returns the CaptchaStage field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetCaptchaStage() CaptchaChallenge {
	if o == nil || IsNil(o.CaptchaStage) {
		var ret CaptchaChallenge
		return ret
	}
	return *o.CaptchaStage
}

// GetCaptchaStageOk returns a tuple with the CaptchaStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetCaptchaStageOk() (*CaptchaChallenge, bool) {
	if o == nil || IsNil(o.CaptchaStage) {
		return nil, false
	}
	return o.CaptchaStage, true
}

// HasCaptchaStage returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasCaptchaStage() bool {
	if o != nil && !IsNil(o.CaptchaStage) {
		return true
	}

	return false
}

// SetCaptchaStage gets a reference to the given CaptchaChallenge and assigns it to the CaptchaStage field.
func (o *IdentificationChallenge) SetCaptchaStage(v CaptchaChallenge) {
	o.CaptchaStage = &v
}

// GetEnrollUrl returns the EnrollUrl field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetEnrollUrl() string {
	if o == nil || IsNil(o.EnrollUrl) {
		var ret string
		return ret
	}
	return *o.EnrollUrl
}

// GetEnrollUrlOk returns a tuple with the EnrollUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetEnrollUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EnrollUrl) {
		return nil, false
	}
	return o.EnrollUrl, true
}

// HasEnrollUrl returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasEnrollUrl() bool {
	if o != nil && !IsNil(o.EnrollUrl) {
		return true
	}

	return false
}

// SetEnrollUrl gets a reference to the given string and assigns it to the EnrollUrl field.
func (o *IdentificationChallenge) SetEnrollUrl(v string) {
	o.EnrollUrl = &v
}

// GetRecoveryUrl returns the RecoveryUrl field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetRecoveryUrl() string {
	if o == nil || IsNil(o.RecoveryUrl) {
		var ret string
		return ret
	}
	return *o.RecoveryUrl
}

// GetRecoveryUrlOk returns a tuple with the RecoveryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetRecoveryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryUrl) {
		return nil, false
	}
	return o.RecoveryUrl, true
}

// HasRecoveryUrl returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasRecoveryUrl() bool {
	if o != nil && !IsNil(o.RecoveryUrl) {
		return true
	}

	return false
}

// SetRecoveryUrl gets a reference to the given string and assigns it to the RecoveryUrl field.
func (o *IdentificationChallenge) SetRecoveryUrl(v string) {
	o.RecoveryUrl = &v
}

// GetPasswordlessUrl returns the PasswordlessUrl field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetPasswordlessUrl() string {
	if o == nil || IsNil(o.PasswordlessUrl) {
		var ret string
		return ret
	}
	return *o.PasswordlessUrl
}

// GetPasswordlessUrlOk returns a tuple with the PasswordlessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetPasswordlessUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordlessUrl) {
		return nil, false
	}
	return o.PasswordlessUrl, true
}

// HasPasswordlessUrl returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasPasswordlessUrl() bool {
	if o != nil && !IsNil(o.PasswordlessUrl) {
		return true
	}

	return false
}

// SetPasswordlessUrl gets a reference to the given string and assigns it to the PasswordlessUrl field.
func (o *IdentificationChallenge) SetPasswordlessUrl(v string) {
	o.PasswordlessUrl = &v
}

// GetPrimaryAction returns the PrimaryAction field value
func (o *IdentificationChallenge) GetPrimaryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryAction
}

// GetPrimaryActionOk returns a tuple with the PrimaryAction field value
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetPrimaryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryAction, true
}

// SetPrimaryAction sets field value
func (o *IdentificationChallenge) SetPrimaryAction(v string) {
	o.PrimaryAction = v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *IdentificationChallenge) GetSources() []LoginSource {
	if o == nil || IsNil(o.Sources) {
		var ret []LoginSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetSourcesOk() ([]LoginSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *IdentificationChallenge) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []LoginSource and assigns it to the Sources field.
func (o *IdentificationChallenge) SetSources(v []LoginSource) {
	o.Sources = v
}

// GetShowSourceLabels returns the ShowSourceLabels field value
func (o *IdentificationChallenge) GetShowSourceLabels() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowSourceLabels
}

// GetShowSourceLabelsOk returns a tuple with the ShowSourceLabels field value
// and a boolean to check if the value has been set.
func (o *IdentificationChallenge) GetShowSourceLabelsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShowSourceLabels, true
}

// SetShowSourceLabels sets field value
func (o *IdentificationChallenge) SetShowSourceLabels(v bool) {
	o.ShowSourceLabels = v
}

func (o IdentificationChallenge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentificationChallenge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlowInfo) {
		toSerialize["flow_info"] = o.FlowInfo
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.ResponseErrors) {
		toSerialize["response_errors"] = o.ResponseErrors
	}
	if o.UserFields != nil {
		toSerialize["user_fields"] = o.UserFields
	}
	toSerialize["password_fields"] = o.PasswordFields
	if !IsNil(o.AllowShowPassword) {
		toSerialize["allow_show_password"] = o.AllowShowPassword
	}
	if !IsNil(o.ApplicationPre) {
		toSerialize["application_pre"] = o.ApplicationPre
	}
	toSerialize["flow_designation"] = o.FlowDesignation
	if !IsNil(o.CaptchaStage) {
		toSerialize["captcha_stage"] = o.CaptchaStage
	}
	if !IsNil(o.EnrollUrl) {
		toSerialize["enroll_url"] = o.EnrollUrl
	}
	if !IsNil(o.RecoveryUrl) {
		toSerialize["recovery_url"] = o.RecoveryUrl
	}
	if !IsNil(o.PasswordlessUrl) {
		toSerialize["passwordless_url"] = o.PasswordlessUrl
	}
	toSerialize["primary_action"] = o.PrimaryAction
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["show_source_labels"] = o.ShowSourceLabels
	return toSerialize, nil
}

func (o *IdentificationChallenge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_fields",
		"password_fields",
		"flow_designation",
		"primary_action",
		"show_source_labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentificationChallenge := _IdentificationChallenge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentificationChallenge)

	if err != nil {
		return err
	}

	*o = IdentificationChallenge(varIdentificationChallenge)

	return err
}

type NullableIdentificationChallenge struct {
	value *IdentificationChallenge
	isSet bool
}

func (v NullableIdentificationChallenge) Get() *IdentificationChallenge {
	return v.value
}

func (v *NullableIdentificationChallenge) Set(val *IdentificationChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentificationChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentificationChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentificationChallenge(val *IdentificationChallenge) *NullableIdentificationChallenge {
	return &NullableIdentificationChallenge{value: val, isSet: true}
}

func (v NullableIdentificationChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentificationChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
