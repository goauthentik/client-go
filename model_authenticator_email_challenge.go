/*
authentik

Making authentication simple.

API version: 2025.6.0
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AuthenticatorEmailChallenge Authenticator Email Setup challenge
type AuthenticatorEmailChallenge struct {
	FlowInfo          *ContextualFlowInfo       `json:"flow_info,omitempty"`
	Component         *string                   `json:"component,omitempty"`
	ResponseErrors    *map[string][]ErrorDetail `json:"response_errors,omitempty"`
	PendingUser       string                    `json:"pending_user"`
	PendingUserAvatar string                    `json:"pending_user_avatar"`
	Email             NullableString            `json:"email,omitempty"`
	EmailRequired     *bool                     `json:"email_required,omitempty"`
}

// NewAuthenticatorEmailChallenge instantiates a new AuthenticatorEmailChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticatorEmailChallenge(pendingUser string, pendingUserAvatar string) *AuthenticatorEmailChallenge {
	this := AuthenticatorEmailChallenge{}
	var component string = "ak-stage-authenticator-email"
	this.Component = &component
	this.PendingUser = pendingUser
	this.PendingUserAvatar = pendingUserAvatar
	var emailRequired bool = true
	this.EmailRequired = &emailRequired
	return &this
}

// NewAuthenticatorEmailChallengeWithDefaults instantiates a new AuthenticatorEmailChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticatorEmailChallengeWithDefaults() *AuthenticatorEmailChallenge {
	this := AuthenticatorEmailChallenge{}
	var component string = "ak-stage-authenticator-email"
	this.Component = &component
	var emailRequired bool = true
	this.EmailRequired = &emailRequired
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *AuthenticatorEmailChallenge) GetFlowInfo() ContextualFlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret ContextualFlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetFlowInfoOk() (*ContextualFlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *AuthenticatorEmailChallenge) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given ContextualFlowInfo and assigns it to the FlowInfo field.
func (o *AuthenticatorEmailChallenge) SetFlowInfo(v ContextualFlowInfo) {
	o.FlowInfo = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *AuthenticatorEmailChallenge) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *AuthenticatorEmailChallenge) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *AuthenticatorEmailChallenge) SetComponent(v string) {
	o.Component = &v
}

// GetResponseErrors returns the ResponseErrors field value if set, zero value otherwise.
func (o *AuthenticatorEmailChallenge) GetResponseErrors() map[string][]ErrorDetail {
	if o == nil || o.ResponseErrors == nil {
		var ret map[string][]ErrorDetail
		return ret
	}
	return *o.ResponseErrors
}

// GetResponseErrorsOk returns a tuple with the ResponseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetResponseErrorsOk() (*map[string][]ErrorDetail, bool) {
	if o == nil || o.ResponseErrors == nil {
		return nil, false
	}
	return o.ResponseErrors, true
}

// HasResponseErrors returns a boolean if a field has been set.
func (o *AuthenticatorEmailChallenge) HasResponseErrors() bool {
	if o != nil && o.ResponseErrors != nil {
		return true
	}

	return false
}

// SetResponseErrors gets a reference to the given map[string][]ErrorDetail and assigns it to the ResponseErrors field.
func (o *AuthenticatorEmailChallenge) SetResponseErrors(v map[string][]ErrorDetail) {
	o.ResponseErrors = &v
}

// GetPendingUser returns the PendingUser field value
func (o *AuthenticatorEmailChallenge) GetPendingUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PendingUser
}

// GetPendingUserOk returns a tuple with the PendingUser field value
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetPendingUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingUser, true
}

// SetPendingUser sets field value
func (o *AuthenticatorEmailChallenge) SetPendingUser(v string) {
	o.PendingUser = v
}

// GetPendingUserAvatar returns the PendingUserAvatar field value
func (o *AuthenticatorEmailChallenge) GetPendingUserAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PendingUserAvatar
}

// GetPendingUserAvatarOk returns a tuple with the PendingUserAvatar field value
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetPendingUserAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingUserAvatar, true
}

// SetPendingUserAvatar sets field value
func (o *AuthenticatorEmailChallenge) SetPendingUserAvatar(v string) {
	o.PendingUserAvatar = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticatorEmailChallenge) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticatorEmailChallenge) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthenticatorEmailChallenge) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *AuthenticatorEmailChallenge) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *AuthenticatorEmailChallenge) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *AuthenticatorEmailChallenge) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailRequired returns the EmailRequired field value if set, zero value otherwise.
func (o *AuthenticatorEmailChallenge) GetEmailRequired() bool {
	if o == nil || o.EmailRequired == nil {
		var ret bool
		return ret
	}
	return *o.EmailRequired
}

// GetEmailRequiredOk returns a tuple with the EmailRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorEmailChallenge) GetEmailRequiredOk() (*bool, bool) {
	if o == nil || o.EmailRequired == nil {
		return nil, false
	}
	return o.EmailRequired, true
}

// HasEmailRequired returns a boolean if a field has been set.
func (o *AuthenticatorEmailChallenge) HasEmailRequired() bool {
	if o != nil && o.EmailRequired != nil {
		return true
	}

	return false
}

// SetEmailRequired gets a reference to the given bool and assigns it to the EmailRequired field.
func (o *AuthenticatorEmailChallenge) SetEmailRequired(v bool) {
	o.EmailRequired = &v
}

func (o AuthenticatorEmailChallenge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowInfo != nil {
		toSerialize["flow_info"] = o.FlowInfo
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.ResponseErrors != nil {
		toSerialize["response_errors"] = o.ResponseErrors
	}
	if true {
		toSerialize["pending_user"] = o.PendingUser
	}
	if true {
		toSerialize["pending_user_avatar"] = o.PendingUserAvatar
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.EmailRequired != nil {
		toSerialize["email_required"] = o.EmailRequired
	}
	return json.Marshal(toSerialize)
}

type NullableAuthenticatorEmailChallenge struct {
	value *AuthenticatorEmailChallenge
	isSet bool
}

func (v NullableAuthenticatorEmailChallenge) Get() *AuthenticatorEmailChallenge {
	return v.value
}

func (v *NullableAuthenticatorEmailChallenge) Set(val *AuthenticatorEmailChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorEmailChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorEmailChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorEmailChallenge(val *AuthenticatorEmailChallenge) *NullableAuthenticatorEmailChallenge {
	return &NullableAuthenticatorEmailChallenge{value: val, isSet: true}
}

func (v NullableAuthenticatorEmailChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorEmailChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
