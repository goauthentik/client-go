/*
authentik

Making authentication simple.

API version: 2025.2.0
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// FrameChallenge Challenge type to render a frame
type FrameChallenge struct {
	FlowInfo       *ContextualFlowInfo       `json:"flow_info,omitempty"`
	Component      *string                   `json:"component,omitempty"`
	ResponseErrors *map[string][]ErrorDetail `json:"response_errors,omitempty"`
	Url            string                    `json:"url"`
	LoadingOverlay *bool                     `json:"loading_overlay,omitempty"`
	LoadingText    string                    `json:"loading_text"`
}

// NewFrameChallenge instantiates a new FrameChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameChallenge(url string, loadingText string) *FrameChallenge {
	this := FrameChallenge{}
	var component string = "xak-flow-frame"
	this.Component = &component
	this.Url = url
	var loadingOverlay bool = false
	this.LoadingOverlay = &loadingOverlay
	this.LoadingText = loadingText
	return &this
}

// NewFrameChallengeWithDefaults instantiates a new FrameChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameChallengeWithDefaults() *FrameChallenge {
	this := FrameChallenge{}
	var component string = "xak-flow-frame"
	this.Component = &component
	var loadingOverlay bool = false
	this.LoadingOverlay = &loadingOverlay
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *FrameChallenge) GetFlowInfo() ContextualFlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret ContextualFlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetFlowInfoOk() (*ContextualFlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *FrameChallenge) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given ContextualFlowInfo and assigns it to the FlowInfo field.
func (o *FrameChallenge) SetFlowInfo(v ContextualFlowInfo) {
	o.FlowInfo = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *FrameChallenge) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *FrameChallenge) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *FrameChallenge) SetComponent(v string) {
	o.Component = &v
}

// GetResponseErrors returns the ResponseErrors field value if set, zero value otherwise.
func (o *FrameChallenge) GetResponseErrors() map[string][]ErrorDetail {
	if o == nil || o.ResponseErrors == nil {
		var ret map[string][]ErrorDetail
		return ret
	}
	return *o.ResponseErrors
}

// GetResponseErrorsOk returns a tuple with the ResponseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetResponseErrorsOk() (*map[string][]ErrorDetail, bool) {
	if o == nil || o.ResponseErrors == nil {
		return nil, false
	}
	return o.ResponseErrors, true
}

// HasResponseErrors returns a boolean if a field has been set.
func (o *FrameChallenge) HasResponseErrors() bool {
	if o != nil && o.ResponseErrors != nil {
		return true
	}

	return false
}

// SetResponseErrors gets a reference to the given map[string][]ErrorDetail and assigns it to the ResponseErrors field.
func (o *FrameChallenge) SetResponseErrors(v map[string][]ErrorDetail) {
	o.ResponseErrors = &v
}

// GetUrl returns the Url field value
func (o *FrameChallenge) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FrameChallenge) SetUrl(v string) {
	o.Url = v
}

// GetLoadingOverlay returns the LoadingOverlay field value if set, zero value otherwise.
func (o *FrameChallenge) GetLoadingOverlay() bool {
	if o == nil || o.LoadingOverlay == nil {
		var ret bool
		return ret
	}
	return *o.LoadingOverlay
}

// GetLoadingOverlayOk returns a tuple with the LoadingOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetLoadingOverlayOk() (*bool, bool) {
	if o == nil || o.LoadingOverlay == nil {
		return nil, false
	}
	return o.LoadingOverlay, true
}

// HasLoadingOverlay returns a boolean if a field has been set.
func (o *FrameChallenge) HasLoadingOverlay() bool {
	if o != nil && o.LoadingOverlay != nil {
		return true
	}

	return false
}

// SetLoadingOverlay gets a reference to the given bool and assigns it to the LoadingOverlay field.
func (o *FrameChallenge) SetLoadingOverlay(v bool) {
	o.LoadingOverlay = &v
}

// GetLoadingText returns the LoadingText field value
func (o *FrameChallenge) GetLoadingText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadingText
}

// GetLoadingTextOk returns a tuple with the LoadingText field value
// and a boolean to check if the value has been set.
func (o *FrameChallenge) GetLoadingTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadingText, true
}

// SetLoadingText sets field value
func (o *FrameChallenge) SetLoadingText(v string) {
	o.LoadingText = v
}

func (o FrameChallenge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowInfo != nil {
		toSerialize["flow_info"] = o.FlowInfo
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.ResponseErrors != nil {
		toSerialize["response_errors"] = o.ResponseErrors
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.LoadingOverlay != nil {
		toSerialize["loading_overlay"] = o.LoadingOverlay
	}
	if true {
		toSerialize["loading_text"] = o.LoadingText
	}
	return json.Marshal(toSerialize)
}

type NullableFrameChallenge struct {
	value *FrameChallenge
	isSet bool
}

func (v NullableFrameChallenge) Get() *FrameChallenge {
	return v.value
}

func (v *NullableFrameChallenge) Set(val *FrameChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameChallenge(val *FrameChallenge) *NullableFrameChallenge {
	return &NullableFrameChallenge{value: val, isSet: true}
}

func (v NullableFrameChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
