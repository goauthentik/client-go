/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AuthenticatedSessionGeoIp Get GeoIP Data
type AuthenticatedSessionGeoIp struct {
	Continent NullableString  `json:"continent"`
	Country   NullableString  `json:"country"`
	Lat       NullableFloat64 `json:"lat"`
	Long      NullableFloat64 `json:"long"`
	City      string          `json:"city"`
}

// NewAuthenticatedSessionGeoIp instantiates a new AuthenticatedSessionGeoIp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticatedSessionGeoIp(continent NullableString, country NullableString, lat NullableFloat64, long NullableFloat64, city string) *AuthenticatedSessionGeoIp {
	this := AuthenticatedSessionGeoIp{}
	this.Continent = continent
	this.Country = country
	this.Lat = lat
	this.Long = long
	this.City = city
	return &this
}

// NewAuthenticatedSessionGeoIpWithDefaults instantiates a new AuthenticatedSessionGeoIp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticatedSessionGeoIpWithDefaults() *AuthenticatedSessionGeoIp {
	this := AuthenticatedSessionGeoIp{}
	return &this
}

// GetContinent returns the Continent field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AuthenticatedSessionGeoIp) GetContinent() string {
	if o == nil || o.Continent.Get() == nil {
		var ret string
		return ret
	}

	return *o.Continent.Get()
}

// GetContinentOk returns a tuple with the Continent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticatedSessionGeoIp) GetContinentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Continent.Get(), o.Continent.IsSet()
}

// SetContinent sets field value
func (o *AuthenticatedSessionGeoIp) SetContinent(v string) {
	o.Continent.Set(&v)
}

// GetCountry returns the Country field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AuthenticatedSessionGeoIp) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}

	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticatedSessionGeoIp) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// SetCountry sets field value
func (o *AuthenticatedSessionGeoIp) SetCountry(v string) {
	o.Country.Set(&v)
}

// GetLat returns the Lat field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *AuthenticatedSessionGeoIp) GetLat() float64 {
	if o == nil || o.Lat.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticatedSessionGeoIp) GetLatOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// SetLat sets field value
func (o *AuthenticatedSessionGeoIp) SetLat(v float64) {
	o.Lat.Set(&v)
}

// GetLong returns the Long field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *AuthenticatedSessionGeoIp) GetLong() float64 {
	if o == nil || o.Long.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Long.Get()
}

// GetLongOk returns a tuple with the Long field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticatedSessionGeoIp) GetLongOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Long.Get(), o.Long.IsSet()
}

// SetLong sets field value
func (o *AuthenticatedSessionGeoIp) SetLong(v float64) {
	o.Long.Set(&v)
}

// GetCity returns the City field value
func (o *AuthenticatedSessionGeoIp) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *AuthenticatedSessionGeoIp) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *AuthenticatedSessionGeoIp) SetCity(v string) {
	o.City = v
}

func (o AuthenticatedSessionGeoIp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["continent"] = o.Continent.Get()
	}
	if true {
		toSerialize["country"] = o.Country.Get()
	}
	if true {
		toSerialize["lat"] = o.Lat.Get()
	}
	if true {
		toSerialize["long"] = o.Long.Get()
	}
	if true {
		toSerialize["city"] = o.City
	}
	return json.Marshal(toSerialize)
}

type NullableAuthenticatedSessionGeoIp struct {
	value *AuthenticatedSessionGeoIp
	isSet bool
}

func (v NullableAuthenticatedSessionGeoIp) Get() *AuthenticatedSessionGeoIp {
	return v.value
}

func (v *NullableAuthenticatedSessionGeoIp) Set(val *AuthenticatedSessionGeoIp) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatedSessionGeoIp) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatedSessionGeoIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatedSessionGeoIp(val *AuthenticatedSessionGeoIp) *NullableAuthenticatedSessionGeoIp {
	return &NullableAuthenticatedSessionGeoIp{value: val, isSet: true}
}

func (v NullableAuthenticatedSessionGeoIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatedSessionGeoIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
