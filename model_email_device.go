/*
authentik

Making authentication simple.

API version: 2025.8.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EmailDevice Serializer for email authenticator devices
type EmailDevice struct {
	// The human-readable name of this device.
	Name  string      `json:"name"`
	Pk    int32       `json:"pk"`
	Email string      `json:"email"`
	User  GroupMember `json:"user"`
}

// NewEmailDevice instantiates a new EmailDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailDevice(name string, pk int32, email string, user GroupMember) *EmailDevice {
	this := EmailDevice{}
	this.Name = name
	this.Pk = pk
	this.Email = email
	this.User = user
	return &this
}

// NewEmailDeviceWithDefaults instantiates a new EmailDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailDeviceWithDefaults() *EmailDevice {
	this := EmailDevice{}
	return &this
}

// GetName returns the Name field value
func (o *EmailDevice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmailDevice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmailDevice) SetName(v string) {
	o.Name = v
}

// GetPk returns the Pk field value
func (o *EmailDevice) GetPk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *EmailDevice) GetPkOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *EmailDevice) SetPk(v int32) {
	o.Pk = v
}

// GetEmail returns the Email field value
func (o *EmailDevice) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EmailDevice) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EmailDevice) SetEmail(v string) {
	o.Email = v
}

// GetUser returns the User field value
func (o *EmailDevice) GetUser() GroupMember {
	if o == nil {
		var ret GroupMember
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *EmailDevice) GetUserOk() (*GroupMember, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *EmailDevice) SetUser(v GroupMember) {
	o.User = v
}

func (o EmailDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableEmailDevice struct {
	value *EmailDevice
	isSet bool
}

func (v NullableEmailDevice) Get() *EmailDevice {
	return v.value
}

func (v *NullableEmailDevice) Set(val *EmailDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDevice(val *EmailDevice) *NullableEmailDevice {
	return &NullableEmailDevice{value: val, isSet: true}
}

func (v NullableEmailDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
