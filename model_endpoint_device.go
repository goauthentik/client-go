/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EndpointDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointDevice{}

// EndpointDevice Serializer for Endpoint authenticator devices
type EndpointDevice struct {
	Pk *string `json:"pk,omitempty"`
	// The human-readable name of this device.
	Name string `json:"name"`
}

type _EndpointDevice EndpointDevice

// NewEndpointDevice instantiates a new EndpointDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointDevice(name string) *EndpointDevice {
	this := EndpointDevice{}
	this.Name = name
	return &this
}

// NewEndpointDeviceWithDefaults instantiates a new EndpointDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointDeviceWithDefaults() *EndpointDevice {
	this := EndpointDevice{}
	return &this
}

// GetPk returns the Pk field value if set, zero value otherwise.
func (o *EndpointDevice) GetPk() string {
	if o == nil || IsNil(o.Pk) {
		var ret string
		return ret
	}
	return *o.Pk
}

// GetPkOk returns a tuple with the Pk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointDevice) GetPkOk() (*string, bool) {
	if o == nil || IsNil(o.Pk) {
		return nil, false
	}
	return o.Pk, true
}

// HasPk returns a boolean if a field has been set.
func (o *EndpointDevice) HasPk() bool {
	if o != nil && !IsNil(o.Pk) {
		return true
	}

	return false
}

// SetPk gets a reference to the given string and assigns it to the Pk field.
func (o *EndpointDevice) SetPk(v string) {
	o.Pk = &v
}

// GetName returns the Name field value
func (o *EndpointDevice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EndpointDevice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EndpointDevice) SetName(v string) {
	o.Name = v
}

func (o EndpointDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pk) {
		toSerialize["pk"] = o.Pk
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *EndpointDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointDevice := _EndpointDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndpointDevice)

	if err != nil {
		return err
	}

	*o = EndpointDevice(varEndpointDevice)

	return err
}

type NullableEndpointDevice struct {
	value *EndpointDevice
	isSet bool
}

func (v NullableEndpointDevice) Get() *EndpointDevice {
	return v.value
}

func (v *NullableEndpointDevice) Set(val *EndpointDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointDevice(val *EndpointDevice) *NullableEndpointDevice {
	return &NullableEndpointDevice{value: val, isSet: true}
}

func (v NullableEndpointDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
