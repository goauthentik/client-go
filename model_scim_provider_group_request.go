/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SCIMProviderGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SCIMProviderGroupRequest{}

// SCIMProviderGroupRequest SCIMProviderGroup Serializer
type SCIMProviderGroupRequest struct {
	ScimId   string `json:"scim_id"`
	Group    string `json:"group"`
	Provider int32  `json:"provider"`
}

type _SCIMProviderGroupRequest SCIMProviderGroupRequest

// NewSCIMProviderGroupRequest instantiates a new SCIMProviderGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCIMProviderGroupRequest(scimId string, group string, provider int32) *SCIMProviderGroupRequest {
	this := SCIMProviderGroupRequest{}
	this.ScimId = scimId
	this.Group = group
	this.Provider = provider
	return &this
}

// NewSCIMProviderGroupRequestWithDefaults instantiates a new SCIMProviderGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCIMProviderGroupRequestWithDefaults() *SCIMProviderGroupRequest {
	this := SCIMProviderGroupRequest{}
	return &this
}

// GetScimId returns the ScimId field value
func (o *SCIMProviderGroupRequest) GetScimId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScimId
}

// GetScimIdOk returns a tuple with the ScimId field value
// and a boolean to check if the value has been set.
func (o *SCIMProviderGroupRequest) GetScimIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScimId, true
}

// SetScimId sets field value
func (o *SCIMProviderGroupRequest) SetScimId(v string) {
	o.ScimId = v
}

// GetGroup returns the Group field value
func (o *SCIMProviderGroupRequest) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *SCIMProviderGroupRequest) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *SCIMProviderGroupRequest) SetGroup(v string) {
	o.Group = v
}

// GetProvider returns the Provider field value
func (o *SCIMProviderGroupRequest) GetProvider() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *SCIMProviderGroupRequest) GetProviderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *SCIMProviderGroupRequest) SetProvider(v int32) {
	o.Provider = v
}

func (o SCIMProviderGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SCIMProviderGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scim_id"] = o.ScimId
	toSerialize["group"] = o.Group
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *SCIMProviderGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scim_id",
		"group",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSCIMProviderGroupRequest := _SCIMProviderGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSCIMProviderGroupRequest)

	if err != nil {
		return err
	}

	*o = SCIMProviderGroupRequest(varSCIMProviderGroupRequest)

	return err
}

type NullableSCIMProviderGroupRequest struct {
	value *SCIMProviderGroupRequest
	isSet bool
}

func (v NullableSCIMProviderGroupRequest) Get() *SCIMProviderGroupRequest {
	return v.value
}

func (v *NullableSCIMProviderGroupRequest) Set(val *SCIMProviderGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSCIMProviderGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSCIMProviderGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCIMProviderGroupRequest(val *SCIMProviderGroupRequest) *NullableSCIMProviderGroupRequest {
	return &NullableSCIMProviderGroupRequest{value: val, isSet: true}
}

func (v NullableSCIMProviderGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCIMProviderGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
