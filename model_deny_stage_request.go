/*
authentik

Making authentication simple.

API version: 2024.10.2
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DenyStageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DenyStageRequest{}

// DenyStageRequest DenyStage Serializer
type DenyStageRequest struct {
	Name        string           `json:"name"`
	FlowSet     []FlowSetRequest `json:"flow_set,omitempty"`
	DenyMessage *string          `json:"deny_message,omitempty"`
}

type _DenyStageRequest DenyStageRequest

// NewDenyStageRequest instantiates a new DenyStageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDenyStageRequest(name string) *DenyStageRequest {
	this := DenyStageRequest{}
	this.Name = name
	return &this
}

// NewDenyStageRequestWithDefaults instantiates a new DenyStageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDenyStageRequestWithDefaults() *DenyStageRequest {
	this := DenyStageRequest{}
	return &this
}

// GetName returns the Name field value
func (o *DenyStageRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DenyStageRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DenyStageRequest) SetName(v string) {
	o.Name = v
}

// GetFlowSet returns the FlowSet field value if set, zero value otherwise.
func (o *DenyStageRequest) GetFlowSet() []FlowSetRequest {
	if o == nil || IsNil(o.FlowSet) {
		var ret []FlowSetRequest
		return ret
	}
	return o.FlowSet
}

// GetFlowSetOk returns a tuple with the FlowSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenyStageRequest) GetFlowSetOk() ([]FlowSetRequest, bool) {
	if o == nil || IsNil(o.FlowSet) {
		return nil, false
	}
	return o.FlowSet, true
}

// HasFlowSet returns a boolean if a field has been set.
func (o *DenyStageRequest) HasFlowSet() bool {
	if o != nil && !IsNil(o.FlowSet) {
		return true
	}

	return false
}

// SetFlowSet gets a reference to the given []FlowSetRequest and assigns it to the FlowSet field.
func (o *DenyStageRequest) SetFlowSet(v []FlowSetRequest) {
	o.FlowSet = v
}

// GetDenyMessage returns the DenyMessage field value if set, zero value otherwise.
func (o *DenyStageRequest) GetDenyMessage() string {
	if o == nil || IsNil(o.DenyMessage) {
		var ret string
		return ret
	}
	return *o.DenyMessage
}

// GetDenyMessageOk returns a tuple with the DenyMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenyStageRequest) GetDenyMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DenyMessage) {
		return nil, false
	}
	return o.DenyMessage, true
}

// HasDenyMessage returns a boolean if a field has been set.
func (o *DenyStageRequest) HasDenyMessage() bool {
	if o != nil && !IsNil(o.DenyMessage) {
		return true
	}

	return false
}

// SetDenyMessage gets a reference to the given string and assigns it to the DenyMessage field.
func (o *DenyStageRequest) SetDenyMessage(v string) {
	o.DenyMessage = &v
}

func (o DenyStageRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DenyStageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.FlowSet) {
		toSerialize["flow_set"] = o.FlowSet
	}
	if !IsNil(o.DenyMessage) {
		toSerialize["deny_message"] = o.DenyMessage
	}
	return toSerialize, nil
}

func (o *DenyStageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDenyStageRequest := _DenyStageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDenyStageRequest)

	if err != nil {
		return err
	}

	*o = DenyStageRequest(varDenyStageRequest)

	return err
}

type NullableDenyStageRequest struct {
	value *DenyStageRequest
	isSet bool
}

func (v NullableDenyStageRequest) Get() *DenyStageRequest {
	return v.value
}

func (v *NullableDenyStageRequest) Set(val *DenyStageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDenyStageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDenyStageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDenyStageRequest(val *DenyStageRequest) *NullableDenyStageRequest {
	return &NullableDenyStageRequest{value: val, isSet: true}
}

func (v NullableDenyStageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDenyStageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
