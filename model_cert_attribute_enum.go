/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// CertAttributeEnum the model 'CertAttributeEnum'
type CertAttributeEnum string

// List of CertAttributeEnum
const (
	CERTATTRIBUTEENUM_SUBJECT     CertAttributeEnum = "subject"
	CERTATTRIBUTEENUM_COMMON_NAME CertAttributeEnum = "common_name"
	CERTATTRIBUTEENUM_EMAIL       CertAttributeEnum = "email"
)

// All allowed values of CertAttributeEnum enum
var AllowedCertAttributeEnumEnumValues = []CertAttributeEnum{
	"subject",
	"common_name",
	"email",
}

func (v *CertAttributeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertAttributeEnum(value)
	for _, existing := range AllowedCertAttributeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertAttributeEnum", value)
}

// NewCertAttributeEnumFromValue returns a pointer to a valid CertAttributeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertAttributeEnumFromValue(v string) (*CertAttributeEnum, error) {
	ev := CertAttributeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertAttributeEnum: valid values are %v", v, AllowedCertAttributeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertAttributeEnum) IsValid() bool {
	for _, existing := range AllowedCertAttributeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertAttributeEnum value
func (v CertAttributeEnum) Ptr() *CertAttributeEnum {
	return &v
}

type NullableCertAttributeEnum struct {
	value *CertAttributeEnum
	isSet bool
}

func (v NullableCertAttributeEnum) Get() *CertAttributeEnum {
	return v.value
}

func (v *NullableCertAttributeEnum) Set(val *CertAttributeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCertAttributeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCertAttributeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertAttributeEnum(val *CertAttributeEnum) *NullableCertAttributeEnum {
	return &NullableCertAttributeEnum{value: val, isSet: true}
}

func (v NullableCertAttributeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertAttributeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
