/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// LastTaskStatusEnum the model 'LastTaskStatusEnum'
type LastTaskStatusEnum string

// List of LastTaskStatusEnum
const (
	LASTTASKSTATUSENUM_QUEUED      LastTaskStatusEnum = "queued"
	LASTTASKSTATUSENUM_CONSUMED    LastTaskStatusEnum = "consumed"
	LASTTASKSTATUSENUM_PREPROCESS  LastTaskStatusEnum = "preprocess"
	LASTTASKSTATUSENUM_RUNNING     LastTaskStatusEnum = "running"
	LASTTASKSTATUSENUM_POSTPROCESS LastTaskStatusEnum = "postprocess"
	LASTTASKSTATUSENUM_REJECTED    LastTaskStatusEnum = "rejected"
	LASTTASKSTATUSENUM_DONE        LastTaskStatusEnum = "done"
	LASTTASKSTATUSENUM_INFO        LastTaskStatusEnum = "info"
	LASTTASKSTATUSENUM_WARNING     LastTaskStatusEnum = "warning"
	LASTTASKSTATUSENUM_ERROR       LastTaskStatusEnum = "error"
)

// All allowed values of LastTaskStatusEnum enum
var AllowedLastTaskStatusEnumEnumValues = []LastTaskStatusEnum{
	"queued",
	"consumed",
	"preprocess",
	"running",
	"postprocess",
	"rejected",
	"done",
	"info",
	"warning",
	"error",
}

func (v *LastTaskStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LastTaskStatusEnum(value)
	for _, existing := range AllowedLastTaskStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LastTaskStatusEnum", value)
}

// NewLastTaskStatusEnumFromValue returns a pointer to a valid LastTaskStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLastTaskStatusEnumFromValue(v string) (*LastTaskStatusEnum, error) {
	ev := LastTaskStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LastTaskStatusEnum: valid values are %v", v, AllowedLastTaskStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LastTaskStatusEnum) IsValid() bool {
	for _, existing := range AllowedLastTaskStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LastTaskStatusEnum value
func (v LastTaskStatusEnum) Ptr() *LastTaskStatusEnum {
	return &v
}

type NullableLastTaskStatusEnum struct {
	value *LastTaskStatusEnum
	isSet bool
}

func (v NullableLastTaskStatusEnum) Get() *LastTaskStatusEnum {
	return v.value
}

func (v *NullableLastTaskStatusEnum) Set(val *LastTaskStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLastTaskStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLastTaskStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLastTaskStatusEnum(val *LastTaskStatusEnum) *NullableLastTaskStatusEnum {
	return &NullableLastTaskStatusEnum{value: val, isSet: true}
}

func (v NullableLastTaskStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLastTaskStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
