/*
authentik

Making authentication simple.

API version: 2025.10.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SAMLProviderLogoutMethodEnum the model 'SAMLProviderLogoutMethodEnum'
type SAMLProviderLogoutMethodEnum string

// List of SAMLProviderLogoutMethodEnum
const (
	SAMLPROVIDERLOGOUTMETHODENUM_FRONTCHANNEL_IFRAME SAMLProviderLogoutMethodEnum = "frontchannel_iframe"
	SAMLPROVIDERLOGOUTMETHODENUM_FRONTCHANNEL_NATIVE SAMLProviderLogoutMethodEnum = "frontchannel_native"
	SAMLPROVIDERLOGOUTMETHODENUM_BACKCHANNEL         SAMLProviderLogoutMethodEnum = "backchannel"
)

// All allowed values of SAMLProviderLogoutMethodEnum enum
var AllowedSAMLProviderLogoutMethodEnumEnumValues = []SAMLProviderLogoutMethodEnum{
	"frontchannel_iframe",
	"frontchannel_native",
	"backchannel",
}

func (v *SAMLProviderLogoutMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SAMLProviderLogoutMethodEnum(value)
	for _, existing := range AllowedSAMLProviderLogoutMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SAMLProviderLogoutMethodEnum", value)
}

// NewSAMLProviderLogoutMethodEnumFromValue returns a pointer to a valid SAMLProviderLogoutMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSAMLProviderLogoutMethodEnumFromValue(v string) (*SAMLProviderLogoutMethodEnum, error) {
	ev := SAMLProviderLogoutMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SAMLProviderLogoutMethodEnum: valid values are %v", v, AllowedSAMLProviderLogoutMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SAMLProviderLogoutMethodEnum) IsValid() bool {
	for _, existing := range AllowedSAMLProviderLogoutMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SAMLProviderLogoutMethodEnum value
func (v SAMLProviderLogoutMethodEnum) Ptr() *SAMLProviderLogoutMethodEnum {
	return &v
}

type NullableSAMLProviderLogoutMethodEnum struct {
	value *SAMLProviderLogoutMethodEnum
	isSet bool
}

func (v NullableSAMLProviderLogoutMethodEnum) Get() *SAMLProviderLogoutMethodEnum {
	return v.value
}

func (v *NullableSAMLProviderLogoutMethodEnum) Set(val *SAMLProviderLogoutMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSAMLProviderLogoutMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSAMLProviderLogoutMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAMLProviderLogoutMethodEnum(val *SAMLProviderLogoutMethodEnum) *NullableSAMLProviderLogoutMethodEnum {
	return &NullableSAMLProviderLogoutMethodEnum{value: val, isSet: true}
}

func (v NullableSAMLProviderLogoutMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAMLProviderLogoutMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
