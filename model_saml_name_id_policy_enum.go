/*
authentik

Making authentication simple.

API version: 2025.6.4
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SAMLNameIDPolicyEnum the model 'SAMLNameIDPolicyEnum'
type SAMLNameIDPolicyEnum string

// List of SAMLNameIDPolicyEnum
const (
	SAMLNAMEIDPOLICYENUM__1_1NAMEID_FORMATEMAIL_ADDRESS                 SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
	SAMLNAMEIDPOLICYENUM__2_0NAMEID_FORMATPERSISTENT                    SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
	SAMLNAMEIDPOLICYENUM__1_1NAMEID_FORMATX509_SUBJECT_NAME             SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"
	SAMLNAMEIDPOLICYENUM__2_0NAMEID_FORMATWINDOWS_DOMAIN_QUALIFIED_NAME SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName"
	SAMLNAMEIDPOLICYENUM__2_0NAMEID_FORMATTRANSIENT                     SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
	SAMLNAMEIDPOLICYENUM__1_1NAMEID_FORMATUNSPECIFIED                   SAMLNameIDPolicyEnum = "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
)

// All allowed values of SAMLNameIDPolicyEnum enum
var AllowedSAMLNameIDPolicyEnumEnumValues = []SAMLNameIDPolicyEnum{
	"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
	"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
	"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
	"urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName",
	"urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
	"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
}

func (v *SAMLNameIDPolicyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SAMLNameIDPolicyEnum(value)
	for _, existing := range AllowedSAMLNameIDPolicyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SAMLNameIDPolicyEnum", value)
}

// NewSAMLNameIDPolicyEnumFromValue returns a pointer to a valid SAMLNameIDPolicyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSAMLNameIDPolicyEnumFromValue(v string) (*SAMLNameIDPolicyEnum, error) {
	ev := SAMLNameIDPolicyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SAMLNameIDPolicyEnum: valid values are %v", v, AllowedSAMLNameIDPolicyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SAMLNameIDPolicyEnum) IsValid() bool {
	for _, existing := range AllowedSAMLNameIDPolicyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SAMLNameIDPolicyEnum value
func (v SAMLNameIDPolicyEnum) Ptr() *SAMLNameIDPolicyEnum {
	return &v
}

type NullableSAMLNameIDPolicyEnum struct {
	value *SAMLNameIDPolicyEnum
	isSet bool
}

func (v NullableSAMLNameIDPolicyEnum) Get() *SAMLNameIDPolicyEnum {
	return v.value
}

func (v *NullableSAMLNameIDPolicyEnum) Set(val *SAMLNameIDPolicyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSAMLNameIDPolicyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSAMLNameIDPolicyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAMLNameIDPolicyEnum(val *SAMLNameIDPolicyEnum) *NullableSAMLNameIDPolicyEnum {
	return &NullableSAMLNameIDPolicyEnum{value: val, isSet: true}
}

func (v NullableSAMLNameIDPolicyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAMLNameIDPolicyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
