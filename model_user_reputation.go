/*
authentik

Making authentication simple.

API version: 2021.9.1-rc3
Contact: hello@beryju.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// UserReputation UserReputation Serializer
type UserReputation struct {
	Pk       int32     `json:"pk"`
	Username string    `json:"username"`
	Score    *int32    `json:"score,omitempty"`
	Updated  time.Time `json:"updated"`
}

// NewUserReputation instantiates a new UserReputation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserReputation(pk int32, username string, updated time.Time) *UserReputation {
	this := UserReputation{}
	this.Pk = pk
	this.Username = username
	this.Updated = updated
	return &this
}

// NewUserReputationWithDefaults instantiates a new UserReputation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserReputationWithDefaults() *UserReputation {
	this := UserReputation{}
	return &this
}

// GetPk returns the Pk field value
func (o *UserReputation) GetPk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UserReputation) GetPkOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UserReputation) SetPk(v int32) {
	o.Pk = v
}

// GetUsername returns the Username field value
func (o *UserReputation) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserReputation) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserReputation) SetUsername(v string) {
	o.Username = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *UserReputation) GetScore() int32 {
	if o == nil || o.Score == nil {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReputation) GetScoreOk() (*int32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *UserReputation) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *UserReputation) SetScore(v int32) {
	o.Score = &v
}

// GetUpdated returns the Updated field value
func (o *UserReputation) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *UserReputation) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *UserReputation) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o UserReputation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableUserReputation struct {
	value *UserReputation
	isSet bool
}

func (v NullableUserReputation) Get() *UserReputation {
	return v.value
}

func (v *NullableUserReputation) Set(val *UserReputation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserReputation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserReputation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserReputation(val *UserReputation) *NullableUserReputation {
	return &NullableUserReputation{value: val, isSet: true}
}

func (v NullableUserReputation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserReputation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
