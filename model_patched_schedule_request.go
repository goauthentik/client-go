/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PatchedScheduleRequest struct for PatchedScheduleRequest
type PatchedScheduleRequest struct {
	RelObjId NullableString `json:"rel_obj_id,omitempty"`
	// When to schedule tasks
	Crontab *string `json:"crontab,omitempty"`
	// Pause this schedule
	Paused *bool `json:"paused,omitempty"`
}

// NewPatchedScheduleRequest instantiates a new PatchedScheduleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedScheduleRequest() *PatchedScheduleRequest {
	this := PatchedScheduleRequest{}
	return &this
}

// NewPatchedScheduleRequestWithDefaults instantiates a new PatchedScheduleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedScheduleRequestWithDefaults() *PatchedScheduleRequest {
	this := PatchedScheduleRequest{}
	return &this
}

// GetRelObjId returns the RelObjId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedScheduleRequest) GetRelObjId() string {
	if o == nil || o.RelObjId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RelObjId.Get()
}

// GetRelObjIdOk returns a tuple with the RelObjId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedScheduleRequest) GetRelObjIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelObjId.Get(), o.RelObjId.IsSet()
}

// HasRelObjId returns a boolean if a field has been set.
func (o *PatchedScheduleRequest) HasRelObjId() bool {
	if o != nil && o.RelObjId.IsSet() {
		return true
	}

	return false
}

// SetRelObjId gets a reference to the given NullableString and assigns it to the RelObjId field.
func (o *PatchedScheduleRequest) SetRelObjId(v string) {
	o.RelObjId.Set(&v)
}

// SetRelObjIdNil sets the value for RelObjId to be an explicit nil
func (o *PatchedScheduleRequest) SetRelObjIdNil() {
	o.RelObjId.Set(nil)
}

// UnsetRelObjId ensures that no value is present for RelObjId, not even an explicit nil
func (o *PatchedScheduleRequest) UnsetRelObjId() {
	o.RelObjId.Unset()
}

// GetCrontab returns the Crontab field value if set, zero value otherwise.
func (o *PatchedScheduleRequest) GetCrontab() string {
	if o == nil || o.Crontab == nil {
		var ret string
		return ret
	}
	return *o.Crontab
}

// GetCrontabOk returns a tuple with the Crontab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedScheduleRequest) GetCrontabOk() (*string, bool) {
	if o == nil || o.Crontab == nil {
		return nil, false
	}
	return o.Crontab, true
}

// HasCrontab returns a boolean if a field has been set.
func (o *PatchedScheduleRequest) HasCrontab() bool {
	if o != nil && o.Crontab != nil {
		return true
	}

	return false
}

// SetCrontab gets a reference to the given string and assigns it to the Crontab field.
func (o *PatchedScheduleRequest) SetCrontab(v string) {
	o.Crontab = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *PatchedScheduleRequest) GetPaused() bool {
	if o == nil || o.Paused == nil {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedScheduleRequest) GetPausedOk() (*bool, bool) {
	if o == nil || o.Paused == nil {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *PatchedScheduleRequest) HasPaused() bool {
	if o != nil && o.Paused != nil {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *PatchedScheduleRequest) SetPaused(v bool) {
	o.Paused = &v
}

func (o PatchedScheduleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RelObjId.IsSet() {
		toSerialize["rel_obj_id"] = o.RelObjId.Get()
	}
	if o.Crontab != nil {
		toSerialize["crontab"] = o.Crontab
	}
	if o.Paused != nil {
		toSerialize["paused"] = o.Paused
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedScheduleRequest struct {
	value *PatchedScheduleRequest
	isSet bool
}

func (v NullablePatchedScheduleRequest) Get() *PatchedScheduleRequest {
	return v.value
}

func (v *NullablePatchedScheduleRequest) Set(val *PatchedScheduleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedScheduleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedScheduleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedScheduleRequest(val *PatchedScheduleRequest) *NullablePatchedScheduleRequest {
	return &NullablePatchedScheduleRequest{value: val, isSet: true}
}

func (v NullablePatchedScheduleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedScheduleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
