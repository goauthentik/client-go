/*
authentik

Making authentication simple.

API version: 2025.6.0
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// CompatibilityModeEnum the model 'CompatibilityModeEnum'
type CompatibilityModeEnum string

// List of CompatibilityModeEnum
const (
	COMPATIBILITYMODEENUM_DEFAULT CompatibilityModeEnum = "default"
	COMPATIBILITYMODEENUM_AWS     CompatibilityModeEnum = "aws"
	COMPATIBILITYMODEENUM_SLACK   CompatibilityModeEnum = "slack"
)

// All allowed values of CompatibilityModeEnum enum
var AllowedCompatibilityModeEnumEnumValues = []CompatibilityModeEnum{
	"default",
	"aws",
	"slack",
}

func (v *CompatibilityModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompatibilityModeEnum(value)
	for _, existing := range AllowedCompatibilityModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompatibilityModeEnum", value)
}

// NewCompatibilityModeEnumFromValue returns a pointer to a valid CompatibilityModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompatibilityModeEnumFromValue(v string) (*CompatibilityModeEnum, error) {
	ev := CompatibilityModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompatibilityModeEnum: valid values are %v", v, AllowedCompatibilityModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompatibilityModeEnum) IsValid() bool {
	for _, existing := range AllowedCompatibilityModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompatibilityModeEnum value
func (v CompatibilityModeEnum) Ptr() *CompatibilityModeEnum {
	return &v
}

type NullableCompatibilityModeEnum struct {
	value *CompatibilityModeEnum
	isSet bool
}

func (v NullableCompatibilityModeEnum) Get() *CompatibilityModeEnum {
	return v.value
}

func (v *NullableCompatibilityModeEnum) Set(val *CompatibilityModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibilityModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibilityModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibilityModeEnum(val *CompatibilityModeEnum) *NullableCompatibilityModeEnum {
	return &NullableCompatibilityModeEnum{value: val, isSet: true}
}

func (v NullableCompatibilityModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibilityModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
