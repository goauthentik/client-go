/*
authentik

Making authentication simple.

API version: 2025.12.0-rc1
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SAMLBindingsEnum the model 'SAMLBindingsEnum'
type SAMLBindingsEnum string

// List of SAMLBindingsEnum
const (
	SAMLBINDINGSENUM_REDIRECT SAMLBindingsEnum = "redirect"
	SAMLBINDINGSENUM_POST     SAMLBindingsEnum = "post"
)

// All allowed values of SAMLBindingsEnum enum
var AllowedSAMLBindingsEnumEnumValues = []SAMLBindingsEnum{
	"redirect",
	"post",
}

func (v *SAMLBindingsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SAMLBindingsEnum(value)
	for _, existing := range AllowedSAMLBindingsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SAMLBindingsEnum", value)
}

// NewSAMLBindingsEnumFromValue returns a pointer to a valid SAMLBindingsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSAMLBindingsEnumFromValue(v string) (*SAMLBindingsEnum, error) {
	ev := SAMLBindingsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SAMLBindingsEnum: valid values are %v", v, AllowedSAMLBindingsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SAMLBindingsEnum) IsValid() bool {
	for _, existing := range AllowedSAMLBindingsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SAMLBindingsEnum value
func (v SAMLBindingsEnum) Ptr() *SAMLBindingsEnum {
	return &v
}

type NullableSAMLBindingsEnum struct {
	value *SAMLBindingsEnum
	isSet bool
}

func (v NullableSAMLBindingsEnum) Get() *SAMLBindingsEnum {
	return v.value
}

func (v *NullableSAMLBindingsEnum) Set(val *SAMLBindingsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSAMLBindingsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSAMLBindingsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAMLBindingsEnum(val *SAMLBindingsEnum) *NullableSAMLBindingsEnum {
	return &NullableSAMLBindingsEnum{value: val, isSet: true}
}

func (v NullableSAMLBindingsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAMLBindingsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
